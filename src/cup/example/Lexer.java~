/* The following code was generated by JFlex 1.3.5 on 20.12.2022, 15:03 */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 20.12.2022, 15:03 from the specification file
 * <tt>file:/C:/Users/Vlad/git/repository/Laborator_PT/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\16\0\4\0\1\3\1\6"+
    "\1\53\1\4\1\4\5\4\1\10\2\4\1\7\1\4\1\12\1\4"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\3\4\2\4\1\5\1\22"+
    "\1\11\2\4\1\23\1\24\1\15\1\13\1\21\1\32\1\33\1\41"+
    "\1\35\1\51\1\36\1\31\1\27\1\26\1\14\1\20\1\37\1\25"+
    "\1\30\1\16\1\34\1\40\1\52\1\50\1\17\1\4\4\4\1\4"+
    "\1\4\1\23\1\24\1\15\1\13\1\21\1\32\1\33\1\41\1\35"+
    "\1\51\1\36\1\31\1\27\1\26\1\14\1\20\1\37\1\25\1\30"+
    "\1\16\1\34\1\40\1\52\1\50\1\17\1\4\1\4\1\0\2\4"+
    "\41\0\2\0\4\0\4\0\1\0\2\0\1\0\7\0\1\0\4\0"+
    "\1\0\5\0\27\0\1\0\37\0\1\0\u01ca\0\4\0\14\0\16\0"+
    "\5\0\7\0\1\0\1\0\1\0\21\0\160\0\5\0\1\0\2\0"+
    "\2\0\4\0\1\0\1\0\6\0\1\0\1\0\3\0\1\0\1\0"+
    "\1\0\24\0\1\0\123\0\1\0\213\0\1\0\5\0\2\0\246\0"+
    "\1\0\46\0\2\0\1\0\6\0\51\0\6\0\1\0\1\0\55\0"+
    "\1\0\1\0\1\0\2\0\1\0\2\0\1\0\1\0\10\0\33\0"+
    "\4\0\4\0\15\0\6\0\5\0\1\0\4\0\13\0\1\0\1\0"+
    "\3\0\53\0\37\0\4\0\2\0\1\0\143\0\1\0\1\0\10\0"+
    "\1\0\6\0\2\0\2\0\1\0\4\0\2\0\12\0\3\0\2\0"+
    "\1\0\17\0\1\0\1\0\1\0\36\0\33\0\2\0\131\0\13\0"+
    "\1\0\16\0\12\0\41\0\11\0\2\0\4\0\1\0\2\0\1\0"+
    "\30\0\4\0\1\0\11\0\1\0\3\0\1\0\5\0\22\0\31\0"+
    "\3\0\4\0\13\0\65\0\25\0\1\0\22\0\13\0\61\0\66\0"+
    "\3\0\1\0\22\0\1\0\7\0\12\0\2\0\2\0\12\0\1\0"+
    "\20\0\3\0\1\0\10\0\2\0\2\0\2\0\26\0\1\0\7\0"+
    "\1\0\1\0\3\0\4\0\2\0\1\0\1\0\7\0\2\0\2\0"+
    "\2\0\3\0\1\0\10\0\1\0\4\0\2\0\1\0\3\0\2\0"+
    "\2\0\12\0\4\0\7\0\2\0\1\0\1\0\2\0\3\0\1\0"+
    "\6\0\4\0\2\0\2\0\26\0\1\0\7\0\1\0\2\0\1\0"+
    "\2\0\1\0\2\0\2\0\1\0\1\0\5\0\4\0\2\0\2\0"+
    "\3\0\3\0\1\0\7\0\4\0\1\0\1\0\7\0\14\0\3\0"+
    "\1\0\13\0\3\0\1\0\11\0\1\0\3\0\1\0\26\0\1\0"+
    "\7\0\1\0\2\0\1\0\5\0\2\0\1\0\1\0\10\0\1\0"+
    "\3\0\1\0\3\0\2\0\1\0\17\0\2\0\2\0\2\0\12\0"+
    "\1\0\1\0\7\0\1\0\6\0\1\0\3\0\1\0\10\0\2\0"+
    "\2\0\2\0\26\0\1\0\7\0\1\0\2\0\1\0\5\0\2\0"+
    "\1\0\1\0\7\0\2\0\2\0\2\0\3\0\7\0\3\0\4\0"+
    "\2\0\1\0\3\0\2\0\2\0\12\0\1\0\1\0\20\0\1\0"+
    "\1\0\1\0\6\0\3\0\3\0\1\0\4\0\3\0\2\0\1\0"+
    "\1\0\1\0\2\0\3\0\2\0\3\0\3\0\3\0\14\0\4\0"+
    "\5\0\3\0\3\0\1\0\4\0\2\0\1\0\6\0\1\0\16\0"+
    "\12\0\11\0\1\0\6\0\5\0\10\0\1\0\3\0\1\0\27\0"+
    "\1\0\20\0\3\0\1\0\7\0\1\0\3\0\1\0\4\0\7\0"+
    "\2\0\1\0\3\0\5\0\2\0\2\0\2\0\12\0\20\0\1\0"+
    "\3\0\1\0\10\0\1\0\3\0\1\0\27\0\1\0\12\0\1\0"+
    "\5\0\2\0\1\0\1\0\7\0\1\0\3\0\1\0\4\0\7\0"+
    "\2\0\7\0\1\0\1\0\2\0\2\0\2\0\12\0\1\0\2\0"+
    "\15\0\4\0\11\0\1\0\3\0\1\0\51\0\2\0\1\0\7\0"+
    "\1\0\3\0\1\0\4\0\1\0\5\0\3\0\1\0\7\0\3\0"+
    "\2\0\2\0\12\0\12\0\6\0\1\0\3\0\1\0\22\0\3\0"+
    "\30\0\1\0\11\0\1\0\1\0\2\0\7\0\3\0\1\0\4\0"+
    "\6\0\1\0\1\0\1\0\10\0\6\0\12\0\2\0\2\0\15\0"+
    "\60\0\1\0\2\0\7\0\4\0\10\0\10\0\1\0\12\0\47\0"+
    "\2\0\1\0\1\0\1\0\5\0\1\0\30\0\1\0\1\0\1\0"+
    "\12\0\1\0\2\0\11\0\1\0\2\0\5\0\1\0\1\0\1\0"+
    "\6\0\2\0\12\0\2\0\4\0\40\0\1\0\27\0\2\0\6\0"+
    "\12\0\13\0\1\0\1\0\1\0\1\0\1\0\4\0\2\0\10\0"+
    "\1\0\44\0\4\0\24\0\1\0\2\0\5\0\13\0\1\0\44\0"+
    "\11\0\1\0\71\0\53\0\24\0\1\0\12\0\6\0\6\0\4\0"+
    "\4\0\3\0\1\0\3\0\2\0\7\0\3\0\4\0\15\0\14\0"+
    "\1\0\17\0\2\0\46\0\1\0\1\0\5\0\1\0\2\0\53\0"+
    "\1\0\u014d\0\1\0\4\0\2\0\7\0\1\0\1\0\1\0\4\0"+
    "\2\0\51\0\1\0\4\0\2\0\41\0\1\0\4\0\2\0\7\0"+
    "\1\0\1\0\1\0\4\0\2\0\17\0\1\0\71\0\1\0\4\0"+
    "\2\0\103\0\2\0\3\0\40\0\20\0\20\0\126\0\2\0\6\0"+
    "\3\0\u026c\0\2\0\21\0\1\0\32\0\5\0\113\0\3\0\13\0"+
    "\7\0\15\0\1\0\4\0\3\0\13\0\22\0\3\0\13\0\22\0"+
    "\2\0\14\0\15\0\1\0\3\0\1\0\2\0\14\0\64\0\40\0"+
    "\3\0\1\0\3\0\2\0\1\0\2\0\12\0\41\0\4\0\1\0"+
    "\12\0\6\0\131\0\7\0\5\0\2\0\42\0\1\0\1\0\5\0"+
    "\106\0\12\0\37\0\1\0\14\0\4\0\14\0\12\0\12\0\36\0"+
    "\2\0\5\0\13\0\54\0\4\0\32\0\6\0\12\0\46\0\27\0"+
    "\5\0\4\0\65\0\12\0\1\0\35\0\2\0\13\0\6\0\12\0"+
    "\15\0\1\0\10\0\16\0\1\0\2\0\77\0\5\0\57\0\21\0"+
    "\7\0\4\0\12\0\21\0\11\0\14\0\3\0\36\0\15\0\2\0"+
    "\12\0\54\0\16\0\14\0\44\0\24\0\10\0\12\0\3\0\3\0"+
    "\12\0\44\0\2\0\11\0\7\0\53\0\2\0\3\0\20\0\3\0"+
    "\1\0\25\0\4\0\1\0\6\0\1\0\2\0\3\0\1\0\5\0"+
    "\300\0\72\0\1\0\5\0\u0116\0\2\0\6\0\2\0\46\0\2\0"+
    "\6\0\2\0\10\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\37\0\2\0\65\0\1\0\7\0\1\0\1\0\3\0\3\0\1\0"+
    "\7\0\3\0\4\0\2\0\6\0\4\0\15\0\5\0\3\0\1\0"+
    "\7\0\16\0\5\0\32\0\5\0\20\0\2\0\23\0\1\0\13\0"+
    "\5\0\1\0\12\0\1\0\1\0\15\0\1\0\20\0\15\0\3\0"+
    "\40\0\20\0\15\0\4\0\1\0\3\0\14\0\21\0\1\0\4\0"+
    "\1\0\2\0\12\0\1\0\1\0\3\0\5\0\6\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\4\0\1\0\13\0\2\0\4\0\5\0"+
    "\5\0\4\0\1\0\21\0\51\0\u0a77\0\57\0\1\0\57\0\1\0"+
    "\205\0\6\0\4\0\3\0\2\0\14\0\46\0\1\0\1\0\5\0"+
    "\1\0\2\0\70\0\7\0\1\0\17\0\1\0\27\0\11\0\7\0"+
    "\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0"+
    "\1\0\7\0\1\0\7\0\1\0\40\0\57\0\1\0\u01d5\0\3\0"+
    "\31\0\11\0\6\0\1\0\5\0\2\0\5\0\4\0\126\0\2\0"+
    "\2\0\2\0\3\0\1\0\132\0\1\0\4\0\5\0\53\0\1\0"+
    "\136\0\21\0\40\0\60\0\20\0\u0200\0\u19c0\0\100\0\u51fd\0\3\0"+
    "\u048d\0\103\0\56\0\2\0\u010d\0\3\0\20\0\12\0\2\0\24\0"+
    "\57\0\1\0\4\0\12\0\1\0\37\0\2\0\120\0\2\0\45\0"+
    "\11\0\2\0\147\0\2\0\65\0\2\0\11\0\52\0\15\0\1\0"+
    "\3\0\1\0\4\0\1\0\27\0\5\0\4\0\1\0\13\0\1\0"+
    "\7\0\64\0\14\0\2\0\62\0\22\0\12\0\12\0\6\0\22\0"+
    "\6\0\3\0\1\0\1\0\2\0\13\0\34\0\10\0\2\0\27\0"+
    "\15\0\14\0\35\0\3\0\4\0\57\0\16\0\16\0\1\0\12\0"+
    "\6\0\5\0\1\0\12\0\12\0\5\0\1\0\51\0\16\0\11\0"+
    "\3\0\1\0\10\0\2\0\2\0\12\0\6\0\27\0\3\0\1\0"+
    "\3\0\62\0\1\0\1\0\3\0\2\0\2\0\5\0\2\0\1\0"+
    "\1\0\1\0\30\0\3\0\2\0\13\0\5\0\2\0\3\0\2\0"+
    "\12\0\6\0\2\0\6\0\2\0\6\0\11\0\7\0\1\0\7\0"+
    "\1\0\53\0\1\0\16\0\6\0\163\0\10\0\1\0\2\0\2\0"+
    "\12\0\6\0\u2ba4\0\14\0\27\0\4\0\61\0\u2104\0\u016e\0\2\0"+
    "\152\0\46\0\7\0\14\0\5\0\5\0\1\0\1\0\12\0\1\0"+
    "\15\0\1\0\5\0\1\0\1\0\1\0\2\0\1\0\2\0\1\0"+
    "\154\0\41\0\u016b\0\22\0\100\0\2\0\66\0\50\0\15\0\3\0"+
    "\20\0\20\0\20\0\3\0\2\0\30\0\3\0\31\0\1\0\6\0"+
    "\5\0\1\0\207\0\2\0\1\0\4\0\1\0\13\0\12\0\7\0"+
    "\32\0\4\0\1\0\1\0\32\0\13\0\131\0\3\0\6\0\2\0"+
    "\6\0\2\0\6\0\2\0\3\0\3\0\2\0\3\0\2\0\22\0"+
    "\3\0\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    44,    88,   132,    88,   176,    88,    88,   220,   264, 
      308,   352,   396,   440,    88,   484,   528,   572,   616,   660, 
      704,   748,   792,   836,   880,    88,   924,   968,  1012,  1056, 
     1100,   176,  1144,    88,  1188,    88,  1232,    88,  1276,  1320, 
     1364,  1408,    88,  1452,  1496,  1540,  1584,    88,    88,  1628, 
     1672,  1716,    88,  1760,  1804,  1848,  1892,  1936,  1980,  2024, 
     2068,  2112,  2156,  2200,  2244,  2288,  2332,    88,  2376,  2420, 
     2464,  2508,  2552,  2596,  2640,  2684,  2728,  2772,  2816,  2860, 
     2904,  2948,  2992,  3036,  3080,  3124,  3168,  3212,  3256,    88, 
     3300,  3344,  3388,  3432,  3476,  3520,  3564,  3608,  3652,  3696, 
     3740,  3784,    88,    88,    88,    88,    88,    88,  3828,  3872, 
     1100,  1100,  3916,  3960,    88,    88,    88,    88,  4004,  4048, 
     4092,  4136,  4180,  4224,  4268,  4312,  4356,  4400,  4444,  4488, 
     4532,  4576,    88,  4620,  4664,  4708,  4752,  4796,  4840,    88, 
     4884,  4928,  4972,  5016,  5060,    88,  5104,  5148,  5192,  5236, 
     5280,  5324,  5368,    88,  5412,  5456,  5500,  5544,  5588,  5632, 
     5676,  5720,  5764,  5808,    88,    88,  5852,  5896,  5940,  5984, 
     6028,  6072,  6116,  6160,  6204,  6248,    88,    88,  6292,  6336, 
     6380,  6424,    88,  6468,    88,  6512,  6556,  6600,    88,    88, 
     6644,  6688,  6732,  6776,  6820,    88,  6864,  6908,  6952,    88, 
     6996,  7040,  7084,  7128,  7172,  7216,  7260,  7304,  7348,  7392, 
     7436,    88,    88,    88,  7480,  7524,  7568,  7612,  7656,    88, 
     7700,  7744,  7788,    88,    88,  7832,  7876,  7920,  7964,  8008, 
     8052,  8096,    88,  8140,  8184,    88,  8228,  8272,  8316,  8360, 
       88,  8404,    88,    88,  8448,  8492,  8536,  8580,  8624,  8668, 
     8712,  8756,    88,    88,    88,  8800,  8844,  8888,  8932,  8976, 
     9020,  9064,  9108,  9152,    88,    88,    88,    88,    88,    88, 
       88,  9196,  9240,  9284,  9328,  9372,    88,  9416,  9460,  9504, 
     9548,  9592,  9636,  9680,  9724,    88,  9768,  9812,  9856,  9900, 
     9944,    88,  9988,    88,    88, 10032, 10076, 10120,    88, 10164, 
    10208, 10252, 10296, 10340, 10384, 10428, 10472,    88,    88, 10516, 
       88, 10560, 10604, 10648, 10692,    88, 10736, 10780, 10824, 10868, 
    10912, 10956,    88, 11000, 11044,    88,    88,    88,    88,    88, 
       88,    88, 11088, 11132, 11176, 11220,    88,    88,    88, 11264, 
    11308,    88, 11352, 11396,    88, 11440,    88,    88, 11484, 11528, 
       88,    88, 11572, 11616,    88, 11660,    88, 11704, 11748,    88, 
       88,  6644,    88,    88,    88,    88, 11792,    88,    88,    88, 
       88,    88, 11836,    88
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\3\1\6\3\3\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\3\1\15\1\16\1\17"+
    "\1\20\1\21\1\3\1\22\1\23\1\24\1\25\1\26"+
    "\1\3\1\27\1\30\1\31\1\32\1\33\1\34\6\3"+
    "\1\35\1\3\1\36\1\37\1\3\1\4\2\5\1\3"+
    "\1\40\46\3\56\0\1\5\57\0\1\41\60\0\1\42"+
    "\1\43\1\0\1\44\2\0\1\45\7\0\1\46\1\47"+
    "\2\0\1\50\36\0\1\51\3\0\1\52\4\0\1\53"+
    "\36\0\1\54\4\0\1\55\1\0\1\56\11\0\1\57"+
    "\31\0\1\60\2\0\1\61\2\0\1\62\1\0\1\63"+
    "\1\64\1\65\4\0\1\66\2\0\1\67\3\0\1\70"+
    "\35\0\1\71\1\0\1\72\55\0\1\73\37\0\1\74"+
    "\1\0\1\75\2\0\1\76\3\0\1\77\1\100\41\0"+
    "\1\101\1\102\6\0\1\103\1\0\1\104\3\0\1\105"+
    "\1\0\1\106\1\0\1\107\32\0\1\110\4\0\1\111"+
    "\53\0\1\112\1\0\1\113\10\0\1\114\34\0\1\115"+
    "\1\116\1\0\1\117\1\120\1\0\1\121\3\0\1\122"+
    "\4\0\1\123\40\0\1\124\1\0\1\125\11\0\1\126"+
    "\32\0\1\127\10\0\1\130\7\0\1\131\47\0\1\132"+
    "\50\0\1\133\1\134\1\135\1\136\1\137\42\0\1\140"+
    "\2\0\1\141\50\0\1\142\1\0\1\143\46\0\1\144"+
    "\2\0\1\145\3\0\1\146\14\0\1\147\1\150\1\151"+
    "\1\152\1\153\1\154\33\0\1\155\50\0\1\156\33\0"+
    "\47\157\1\160\7\0\1\161\61\0\1\162\67\0\1\163"+
    "\50\0\1\164\52\0\1\165\12\0\1\166\31\0\1\167"+
    "\106\0\1\170\15\0\1\171\15\0\1\172\50\0\1\173"+
    "\45\0\1\174\51\0\1\175\105\0\1\176\27\0\1\177"+
    "\43\0\1\200\53\0\1\201\55\0\1\202\56\0\1\203"+
    "\57\0\1\204\47\0\1\205\56\0\1\206\42\0\1\207"+
    "\65\0\1\210\46\0\1\211\57\0\1\212\50\0\1\213"+
    "\46\0\1\214\52\0\1\215\70\0\1\216\37\0\1\217"+
    "\20\0\1\220\46\0\1\221\56\0\1\222\41\0\1\223"+
    "\2\0\1\224\3\0\1\225\1\0\1\226\71\0\1\227"+
    "\21\0\1\230\7\0\1\231\45\0\1\232\4\0\1\233"+
    "\57\0\1\234\47\0\1\235\45\0\1\236\5\0\1\237"+
    "\51\0\1\240\55\0\1\241\3\0\1\242\51\0\1\243"+
    "\47\0\1\244\50\0\1\245\3\0\1\246\62\0\1\247"+
    "\37\0\1\250\4\0\1\251\55\0\1\252\1\0\1\253"+
    "\50\0\1\254\1\255\50\0\1\256\51\0\1\257\52\0"+
    "\1\260\7\0\1\261\56\0\1\262\55\0\1\263\41\0"+
    "\1\264\55\0\1\265\45\0\1\266\47\0\1\267\65\0"+
    "\1\270\53\0\1\271\55\0\1\272\47\0\1\273\51\0"+
    "\1\274\52\0\1\275\60\0\1\276\35\0\1\277\62\0"+
    "\1\300\70\0\1\301\1\0\1\302\37\0\1\303\53\0"+
    "\1\304\65\0\1\305\36\0\1\306\53\0\1\307\56\0"+
    "\1\310\50\0\1\311\66\0\1\312\35\0\1\313\54\0"+
    "\1\314\70\0\1\315\45\0\1\316\53\0\1\317\51\0"+
    "\1\320\57\0\1\321\42\0\1\322\70\0\1\323\47\0"+
    "\1\324\51\0\1\325\47\0\1\326\55\0\1\327\47\0"+
    "\1\330\64\0\1\331\41\0\1\332\66\0\1\333\51\0"+
    "\1\334\43\0\1\335\63\0\1\336\44\0\1\337\60\0"+
    "\1\340\64\0\1\341\56\0\1\342\32\0\1\343\72\0"+
    "\1\344\47\0\1\345\36\0\1\346\20\0\1\347\33\0"+
    "\1\350\10\0\1\351\65\0\1\352\34\0\1\353\52\0"+
    "\1\354\64\0\1\355\43\0\1\356\53\0\1\357\53\0"+
    "\1\360\70\0\1\361\33\0\1\362\64\0\1\363\42\0"+
    "\1\364\64\0\1\365\55\0\1\366\56\0\1\367\45\0"+
    "\1\370\44\0\1\371\57\0\1\372\63\0\1\373\50\0"+
    "\1\374\54\0\1\375\35\0\1\376\72\0\1\377\21\0"+
    "\10\277\1\u0100\43\277\17\0\1\u0101\61\0\1\u0102\42\0"+
    "\1\u0103\54\0\1\u0104\63\0\1\u0105\47\0\1\u0106\67\0"+
    "\1\u0107\41\0\1\u0108\51\0\1\u0109\51\0\1\u010a\52\0"+
    "\1\u010b\56\0\1\u010c\45\0\1\u010d\67\0\1\u010e\37\0"+
    "\1\u010f\61\0\1\u0110\60\0\1\u0111\46\0\1\u0112\64\0"+
    "\1\u0113\57\0\1\u0114\53\0\1\u0115\51\0\1\u0116\43\0"+
    "\1\u0117\54\0\1\u0118\51\0\1\u0119\65\0\1\u011a\52\0"+
    "\1\u011b\54\0\1\u011c\36\0\1\u011d\54\0\1\u011e\60\0"+
    "\1\u011f\63\0\1\u0120\36\0\1\u0121\53\0\1\u0122\47\0"+
    "\1\u0123\67\0\1\u0124\50\0\1\u0125\52\0\1\u0126\57\0"+
    "\1\u0127\57\0\1\u0128\37\0\1\u0129\45\0\1\u012a\56\0"+
    "\1\u012b\50\0\1\u012c\61\0\1\u012d\61\0\1\u012e\45\0"+
    "\1\u012f\67\0\1\u0130\16\0\7\277\1\u0131\1\u0100\1\277"+
    "\1\0\41\277\20\0\1\u0132\47\0\1\u0133\65\0\1\u0134"+
    "\43\0\1\u0135\51\0\1\u0136\64\0\1\u0137\42\0\1\u0138"+
    "\64\0\1\u0139\56\0\1\u013a\42\0\1\u013b\52\0\1\u013c"+
    "\51\0\1\u013d\76\0\1\u013e\42\0\1\u013f\46\0\1\u0140"+
    "\67\0\1\u0141\45\0\1\u0142\37\0\1\u0143\61\0\1\u0144"+
    "\47\0\1\u0145\54\0\1\u0146\70\0\1\u0147\41\0\1\u0148"+
    "\57\0\1\u0149\53\0\1\u014a\44\0\1\u014b\50\0\1\u014c"+
    "\66\0\1\u014d\55\0\1\u014e\53\0\1\u014f\44\0\1\u0150"+
    "\57\0\1\u0151\47\0\1\u0152\60\0\1\u0153\41\0\1\u0154"+
    "\37\0\7\277\1\u0155\1\u0100\43\277\21\0\1\u0156\66\0"+
    "\1\u0157\53\0\1\u0158\45\0\1\u0159\46\0\1\u015a\62\0"+
    "\1\u015b\52\0\1\u015c\52\0\1\u015d\61\0\1\u015e\32\0"+
    "\1\u015f\53\0\1\u0160\60\0\1\u0161\54\0\1\u0162\53\0"+
    "\1\u0163\46\0\1\u0164\72\0\1\u0165\41\0\1\u0166\53\0"+
    "\1\u0167\102\0\1\u0168\31\0\1\u0169\25\0\10\277\1\u0100"+
    "\1\u016a\42\277\20\0\1\u016b\53\0\1\u016c\56\0\1\u016d"+
    "\46\0\1\u016e\51\0\1\u016f\55\0\1\u0170\65\0\1\u0171"+
    "\54\0\1\u0172\40\0\1\u0173\53\0\1\u0174\53\0\1\u0175"+
    "\56\0\1\u0176\32\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  1,  9,  9,  1,  1,  1,  1,  1,  1,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1, 
     0,  9,  0,  9,  0,  9,  0,  0,  0,  0,  9,  0,  0,  0,  0,  9, 
     9,  0,  0,  0,  9,  0,  0,  1,  0,  0,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  1,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  1,  9,  9,  9,  9,  9,  9,  0,  0,  0,  1, 
     0,  0,  9,  9,  9,  9,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0, 
     0,  9,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9,  9,  0,  0,  0,  0,  9,  0,  9,  0,  0,  0,  9,  9,  0,  0, 
     0,  0,  0,  9,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  9,  9,  9,  1,  0,  0,  0,  0,  9,  0,  0,  0,  9, 
     9,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  9,  0,  0,  0,  0, 
     9,  0,  9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  9,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  0, 
     0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0, 
     0,  0,  0,  9,  0,  9,  9,  0,  0,  0,  9,  0,  0,  0,  0,  0, 
     0,  0,  0,  9,  9,  0,  9,  0,  0,  0,  0,  9,  0,  0,  0,  0, 
     0,  0,  9,  0,  0,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  0, 
     9,  9,  9,  0,  0,  9,  0,  0,  9,  0,  9,  9,  0,  0,  9,  9, 
     0,  0,  9,  0,  9,  0,  0,  9,  9,  1,  9,  9,  9,  9,  0,  9, 
     9,  9,  9,  9,  0,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[11880];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2324) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 15: 
          { return symbolFactory.newSymbol("A", A);  }
        case 375: break;
        case 12: 
          { return symbolFactory.newSymbol("P", P);  }
        case 376: break;
        case 16: 
          { return symbolFactory.newSymbol("B", B);  }
        case 377: break;
        case 19: 
          { return symbolFactory.newSymbol("S", S);  }
        case 378: break;
        case 22: 
          { return symbolFactory.newSymbol("U", U);  }
        case 379: break;
        case 23: 
          { return symbolFactory.newSymbol("I", I);  }
        case 380: break;
        case 25: 
          { return symbolFactory.newSymbol("Q", Q);  }
        case 381: break;
        case 2: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 13: 
        case 17: 
        case 18: 
        case 20: 
        case 21: 
        case 24: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 382: break;
        case 361: 
          {  /* ignore */  }
        case 383: break;
        case 111: 
          {  return symbolFactory.newSymbol("STRING", STRING, yytext());  }
        case 384: break;
        case 3: 
        case 4: 
          {                                }
        case 385: break;
        case 338: 
          { return symbolFactory.newSymbol("KEYGEN", KEYGEN);  }
        case 386: break;
        case 337: 
          { return symbolFactory.newSymbol("IFRAME", IFRAME);  }
        case 387: break;
        case 336: 
          { return symbolFactory.newSymbol("ILAYER", ILAYER);  }
        case 388: break;
        case 331: 
          { return symbolFactory.newSymbol("LEGEND", LEGEND);  }
        case 389: break;
        case 330: 
          { return symbolFactory.newSymbol("SELECT", SELECT);  }
        case 390: break;
        case 329: 
          { return symbolFactory.newSymbol("SERVER", SERVER);  }
        case 391: break;
        case 328: 
          { return symbolFactory.newSymbol("SPACER", SPACER);  }
        case 392: break;
        case 327: 
          { return symbolFactory.newSymbol("STRIKE", STRIKE);  }
        case 393: break;
        case 326: 
          { return symbolFactory.newSymbol("STRONG", STRONG);  }
        case 394: break;
        case 325: 
          { return symbolFactory.newSymbol("SCRIPT", SCRIPT);  }
        case 395: break;
        case 322: 
          { return symbolFactory.newSymbol("NEXTID", NEXTID);  }
        case 396: break;
        case 315: 
          { return symbolFactory.newSymbol("APPLET", APPLET);  }
        case 397: break;
        case 310: 
          { return symbolFactory.newSymbol("CENTER", CENTER);  }
        case 398: break;
        case 308: 
          { return symbolFactory.newSymbol("OBJECT", OBJECT);  }
        case 399: break;
        case 307: 
          { return symbolFactory.newSymbol("OPTION", OPTION);  }
        case 400: break;
        case 195: 
          { return symbolFactory.newSymbol("CODE", CODE);  }
        case 401: break;
        case 199: 
          { return symbolFactory.newSymbol("CITE", CITE);  }
        case 402: break;
        case 211: 
          { return symbolFactory.newSymbol("ABBR", ABBR);  }
        case 403: break;
        case 212: 
          { return symbolFactory.newSymbol("AREA", AREA);  }
        case 404: break;
        case 213: 
          { return symbolFactory.newSymbol("BODY", BODY);  }
        case 405: break;
        case 214: 
          { return symbolFactory.newSymbol("BASE", BASE);  }
        case 406: break;
        case 219: 
          { return symbolFactory.newSymbol("NOBR", NOBR);  }
        case 407: break;
        case 223: 
          { return symbolFactory.newSymbol("META", META);  }
        case 408: break;
        case 224: 
          { return symbolFactory.newSymbol("MENU", MENU);  }
        case 409: break;
        case 232: 
          { return symbolFactory.newSymbol("SPAN", SPAN);  }
        case 410: break;
        case 235: 
          { return symbolFactory.newSymbol("SAMP", SAMP);  }
        case 411: break;
        case 240: 
          { return symbolFactory.newSymbol("LINK", LINK);  }
        case 412: break;
        case 242: 
          { return symbolFactory.newSymbol("FORM", FORM);  }
        case 413: break;
        case 243: 
          { return symbolFactory.newSymbol("FONT", FONT);  }
        case 414: break;
        case 252: 
          { return symbolFactory.newSymbol("HTML", HTML);  }
        case 415: break;
        case 253: 
          { return symbolFactory.newSymbol("HEAD", HEAD);  }
        case 416: break;
        case 254: 
          { return symbolFactory.newSymbol("href", href);  }
        case 417: break;
        case 107: 
          { return symbolFactory.newSymbol("H6", H6);  }
        case 418: break;
        case 106: 
          { return symbolFactory.newSymbol("H5", H5);  }
        case 419: break;
        case 105: 
          { return symbolFactory.newSymbol("H4", H4);  }
        case 420: break;
        case 104: 
          { return symbolFactory.newSymbol("H3", H3);  }
        case 421: break;
        case 103: 
          { return symbolFactory.newSymbol("H2", H2);  }
        case 422: break;
        case 102: 
          { return symbolFactory.newSymbol("H1", H1);  }
        case 423: break;
        case 101: 
          { return symbolFactory.newSymbol("HR", HR);  }
        case 424: break;
        case 89: 
          { return symbolFactory.newSymbol("UL", UL);  }
        case 425: break;
        case 85: 
          { return symbolFactory.newSymbol("LI", LI);  }
        case 426: break;
        case 67: 
          { return symbolFactory.newSymbol("BR", BR);  }
        case 427: break;
        case 58: 
          { return symbolFactory.newSymbol("EM", EM);  }
        case 428: break;
        case 55: 
          { return symbolFactory.newSymbol("TH", TH);  }
        case 429: break;
        case 52: 
          { return symbolFactory.newSymbol("TR", TR);  }
        case 430: break;
        case 48: 
          { return symbolFactory.newSymbol("TT", TT);  }
        case 431: break;
        case 47: 
          { return symbolFactory.newSymbol("TD", TD);  }
        case 432: break;
        case 14: 
          { return symbolFactory.newSymbol("EQ", EQ);  }
        case 433: break;
        case 7: 
          { return symbolFactory.newSymbol("SL", SL);  }
        case 434: break;
        case 6: 
          { return symbolFactory.newSymbol("GT", GT);  }
        case 435: break;
        case 5: 
          { return symbolFactory.newSymbol("LT", LT);  }
        case 436: break;
        case 33: 
          { return symbolFactory.newSymbol("DD", DD);  }
        case 437: break;
        case 35: 
          { return symbolFactory.newSymbol("DT", DT);  }
        case 438: break;
        case 37: 
          { return symbolFactory.newSymbol("DL", DL);  }
        case 439: break;
        case 42: 
          { return symbolFactory.newSymbol("OL", OL);  }
        case 440: break;
        case 360: 
          { return symbolFactory.newSymbol("version", version);  }
        case 441: break;
        case 359: 
          { return symbolFactory.newSymbol("ISINDEX", ISINDEX);  }
        case 442: break;
        case 356: 
          { return symbolFactory.newSymbol("LISTING", LISTING);  }
        case 443: break;
        case 354: 
          { return symbolFactory.newSymbol("MARQUEE", MARQUEE);  }
        case 444: break;
        case 351: 
          { return symbolFactory.newSymbol("NOEMBED", NOEMBED);  }
        case 445: break;
        case 350: 
          { return symbolFactory.newSymbol("BGSOUND", BGSOUND);  }
        case 446: break;
        case 347: 
          { return symbolFactory.newSymbol("ACRONYM", ACRONYM);  }
        case 447: break;
        case 346: 
          { return symbolFactory.newSymbol("ADDRESS", ADDRESS);  }
        case 448: break;
        case 344: 
          { return symbolFactory.newSymbol("CAPTION", CAPTION);  }
        case 449: break;
        case 341: 
          { return symbolFactory.newSymbol("DOCTYPE", DOCTYPE);  }
        case 450: break;
        case 373: 
          { return symbolFactory.newSymbol("BLOCKQUOTE", BLOCKQUOTE);  }
        case 451: break;
        case 115: 
          { return symbolFactory.newSymbol("DFN", DFN);  }
        case 452: break;
        case 114: 
          { return symbolFactory.newSymbol("DEL", DEL);  }
        case 453: break;
        case 116: 
          { return symbolFactory.newSymbol("DIR", DIR);  }
        case 454: break;
        case 117: 
          { return symbolFactory.newSymbol("DIV", DIV);  }
        case 455: break;
        case 121: 
          { return symbolFactory.newSymbol("COL", COL);  }
        case 456: break;
        case 132: 
          { return symbolFactory.newSymbol("PRE", PRE);  }
        case 457: break;
        case 139: 
          { return symbolFactory.newSymbol("BDO", BDO);  }
        case 458: break;
        case 145: 
          { return symbolFactory.newSymbol("BIG", BIG);  }
        case 459: break;
        case 153: 
          { return symbolFactory.newSymbol("MAP", MAP);  }
        case 460: break;
        case 164: 
          { return symbolFactory.newSymbol("SUP", SUP);  }
        case 461: break;
        case 165: 
          { return symbolFactory.newSymbol("SUB", SUB);  }
        case 462: break;
        case 176: 
          { return symbolFactory.newSymbol("INS", INS);  }
        case 463: break;
        case 177: 
          { return symbolFactory.newSymbol("IMG", IMG);  }
        case 464: break;
        case 182: 
          { return symbolFactory.newSymbol("KBD", KBD);  }
        case 465: break;
        case 184: 
          { return symbolFactory.newSymbol("VAR", VAR);  }
        case 466: break;
        case 188: 
          { return symbolFactory.newSymbol("XMP", XMP);  }
        case 467: break;
        case 189: 
          { return symbolFactory.newSymbol("WBR", WBR);  }
        case 468: break;
        case 371: 
          { return symbolFactory.newSymbol("FIELDSET", FIELDSET);  }
        case 469: break;
        case 370: 
          { return symbolFactory.newSymbol("FRAMESET", FRAMESET);  }
        case 470: break;
        case 369: 
          { return symbolFactory.newSymbol("MULTICOL", MULTICOL);  }
        case 471: break;
        case 368: 
          { return symbolFactory.newSymbol("NOFRAMES", NOFRAMES);  }
        case 472: break;
        case 367: 
          { return symbolFactory.newSymbol("NOSCRIPT", NOSCRIPT);  }
        case 473: break;
        case 365: 
          { return symbolFactory.newSymbol("BASEFONT", BASEFONT);  }
        case 474: break;
        case 364: 
          { return symbolFactory.newSymbol("TEXTAREA", TEXTAREA);  }
        case 475: break;
        case 363: 
          { return symbolFactory.newSymbol("COLGROUP", COLGROUP);  }
        case 476: break;
        case 362: 
          { return symbolFactory.newSymbol("OPTGROUP", OPTGROUP);  }
        case 477: break;
        case 298: 
          { return symbolFactory.newSymbol("INPUT", INPUT);  }
        case 478: break;
        case 294: 
          { return symbolFactory.newSymbol("LABEL", LABEL);  }
        case 479: break;
        case 293: 
          { return symbolFactory.newSymbol("LAYER", LAYER);  }
        case 480: break;
        case 291: 
          { return symbolFactory.newSymbol("SMALL", SMALL);  }
        case 481: break;
        case 285: 
          { return symbolFactory.newSymbol("STYLE", STYLE);  }
        case 482: break;
        case 276: 
          { return symbolFactory.newSymbol("BLINK", BLINK);  }
        case 483: break;
        case 270: 
          { return symbolFactory.newSymbol("EMBED", EMBED);  }
        case 484: break;
        case 269: 
          { return symbolFactory.newSymbol("PARAM", PARAM);  }
        case 485: break;
        case 268: 
          { return symbolFactory.newSymbol("THEAD", THEAD);  }
        case 486: break;
        case 264: 
          { return symbolFactory.newSymbol("TABLE", TABLE);  }
        case 487: break;
        case 265: 
          { return symbolFactory.newSymbol("TBODY", TBODY);  }
        case 488: break;
        case 266: 
          { return symbolFactory.newSymbol("TFOOT", TFOOT);  }
        case 489: break;
        case 267: 
          { return symbolFactory.newSymbol("TITLE", TITLE);  }
        case 490: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
