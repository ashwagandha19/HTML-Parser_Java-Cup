/* The following code was generated by JFlex 1.3.5 on 14.12.2022, 15:03 */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 14.12.2022, 15:03 from the specification file
 * <tt>file:/C:/Users/Vlad/git/repository/Laborator_PT/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\16\0\4\0\1\3\1\5"+
    "\2\0\1\0\5\0\1\7\2\0\1\6\1\0\1\11\1\0\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\3\0\2\0\1\4\1\0\1\10"+
    "\2\0\1\21\1\22\1\14\1\12\1\20\1\30\1\31\1\37\1\33"+
    "\1\47\1\34\1\27\1\25\1\24\1\13\1\17\1\35\1\23\1\26"+
    "\1\15\1\32\1\36\1\50\1\46\1\16\1\0\4\0\1\0\1\0"+
    "\1\21\1\22\1\14\1\12\1\20\1\30\1\31\1\37\1\33\1\47"+
    "\1\34\1\27\1\25\1\24\1\13\1\17\1\35\1\23\1\26\1\15"+
    "\1\32\1\36\1\50\1\46\1\16\1\0\4\0\41\0\2\0\4\0"+
    "\4\0\1\0\2\0\1\0\7\0\1\0\4\0\1\0\5\0\27\0"+
    "\1\0\37\0\1\0\u01ca\0\4\0\14\0\16\0\5\0\7\0\1\0"+
    "\1\0\1\0\21\0\160\0\5\0\1\0\2\0\2\0\4\0\1\0"+
    "\1\0\6\0\1\0\1\0\3\0\1\0\1\0\1\0\24\0\1\0"+
    "\123\0\1\0\213\0\1\0\5\0\2\0\246\0\1\0\46\0\2\0"+
    "\1\0\6\0\51\0\6\0\1\0\1\0\55\0\1\0\1\0\1\0"+
    "\2\0\1\0\2\0\1\0\1\0\10\0\33\0\4\0\4\0\15\0"+
    "\6\0\5\0\1\0\4\0\13\0\1\0\1\0\3\0\53\0\37\0"+
    "\4\0\2\0\1\0\143\0\1\0\1\0\10\0\1\0\6\0\2\0"+
    "\2\0\1\0\4\0\2\0\12\0\3\0\2\0\1\0\17\0\1\0"+
    "\1\0\1\0\36\0\33\0\2\0\131\0\13\0\1\0\16\0\12\0"+
    "\41\0\11\0\2\0\4\0\1\0\2\0\1\0\30\0\4\0\1\0"+
    "\11\0\1\0\3\0\1\0\5\0\22\0\31\0\3\0\4\0\13\0"+
    "\65\0\25\0\1\0\22\0\13\0\61\0\66\0\3\0\1\0\22\0"+
    "\1\0\7\0\12\0\2\0\2\0\12\0\1\0\20\0\3\0\1\0"+
    "\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0\1\0\3\0"+
    "\4\0\2\0\1\0\1\0\7\0\2\0\2\0\2\0\3\0\1\0"+
    "\10\0\1\0\4\0\2\0\1\0\3\0\2\0\2\0\12\0\4\0"+
    "\7\0\2\0\1\0\1\0\2\0\3\0\1\0\6\0\4\0\2\0"+
    "\2\0\26\0\1\0\7\0\1\0\2\0\1\0\2\0\1\0\2\0"+
    "\2\0\1\0\1\0\5\0\4\0\2\0\2\0\3\0\3\0\1\0"+
    "\7\0\4\0\1\0\1\0\7\0\14\0\3\0\1\0\13\0\3\0"+
    "\1\0\11\0\1\0\3\0\1\0\26\0\1\0\7\0\1\0\2\0"+
    "\1\0\5\0\2\0\1\0\1\0\10\0\1\0\3\0\1\0\3\0"+
    "\2\0\1\0\17\0\2\0\2\0\2\0\12\0\1\0\1\0\7\0"+
    "\1\0\6\0\1\0\3\0\1\0\10\0\2\0\2\0\2\0\26\0"+
    "\1\0\7\0\1\0\2\0\1\0\5\0\2\0\1\0\1\0\7\0"+
    "\2\0\2\0\2\0\3\0\7\0\3\0\4\0\2\0\1\0\3\0"+
    "\2\0\2\0\12\0\1\0\1\0\20\0\1\0\1\0\1\0\6\0"+
    "\3\0\3\0\1\0\4\0\3\0\2\0\1\0\1\0\1\0\2\0"+
    "\3\0\2\0\3\0\3\0\3\0\14\0\4\0\5\0\3\0\3\0"+
    "\1\0\4\0\2\0\1\0\6\0\1\0\16\0\12\0\11\0\1\0"+
    "\6\0\5\0\10\0\1\0\3\0\1\0\27\0\1\0\20\0\3\0"+
    "\1\0\7\0\1\0\3\0\1\0\4\0\7\0\2\0\1\0\3\0"+
    "\5\0\2\0\2\0\2\0\12\0\20\0\1\0\3\0\1\0\10\0"+
    "\1\0\3\0\1\0\27\0\1\0\12\0\1\0\5\0\2\0\1\0"+
    "\1\0\7\0\1\0\3\0\1\0\4\0\7\0\2\0\7\0\1\0"+
    "\1\0\2\0\2\0\2\0\12\0\1\0\2\0\15\0\4\0\11\0"+
    "\1\0\3\0\1\0\51\0\2\0\1\0\7\0\1\0\3\0\1\0"+
    "\4\0\1\0\5\0\3\0\1\0\7\0\3\0\2\0\2\0\12\0"+
    "\12\0\6\0\1\0\3\0\1\0\22\0\3\0\30\0\1\0\11\0"+
    "\1\0\1\0\2\0\7\0\3\0\1\0\4\0\6\0\1\0\1\0"+
    "\1\0\10\0\6\0\12\0\2\0\2\0\15\0\60\0\1\0\2\0"+
    "\7\0\4\0\10\0\10\0\1\0\12\0\47\0\2\0\1\0\1\0"+
    "\1\0\5\0\1\0\30\0\1\0\1\0\1\0\12\0\1\0\2\0"+
    "\11\0\1\0\2\0\5\0\1\0\1\0\1\0\6\0\2\0\12\0"+
    "\2\0\4\0\40\0\1\0\27\0\2\0\6\0\12\0\13\0\1\0"+
    "\1\0\1\0\1\0\1\0\4\0\2\0\10\0\1\0\44\0\4\0"+
    "\24\0\1\0\2\0\5\0\13\0\1\0\44\0\11\0\1\0\71\0"+
    "\53\0\24\0\1\0\12\0\6\0\6\0\4\0\4\0\3\0\1\0"+
    "\3\0\2\0\7\0\3\0\4\0\15\0\14\0\1\0\17\0\2\0"+
    "\46\0\1\0\1\0\5\0\1\0\2\0\53\0\1\0\u014d\0\1\0"+
    "\4\0\2\0\7\0\1\0\1\0\1\0\4\0\2\0\51\0\1\0"+
    "\4\0\2\0\41\0\1\0\4\0\2\0\7\0\1\0\1\0\1\0"+
    "\4\0\2\0\17\0\1\0\71\0\1\0\4\0\2\0\103\0\2\0"+
    "\3\0\40\0\20\0\20\0\126\0\2\0\6\0\3\0\u026c\0\2\0"+
    "\21\0\1\0\32\0\5\0\113\0\3\0\13\0\7\0\15\0\1\0"+
    "\4\0\3\0\13\0\22\0\3\0\13\0\22\0\2\0\14\0\15\0"+
    "\1\0\3\0\1\0\2\0\14\0\64\0\40\0\3\0\1\0\3\0"+
    "\2\0\1\0\2\0\12\0\41\0\4\0\1\0\12\0\6\0\131\0"+
    "\7\0\5\0\2\0\42\0\1\0\1\0\5\0\106\0\12\0\37\0"+
    "\1\0\14\0\4\0\14\0\12\0\12\0\36\0\2\0\5\0\13\0"+
    "\54\0\4\0\32\0\6\0\12\0\46\0\27\0\5\0\4\0\65\0"+
    "\12\0\1\0\35\0\2\0\13\0\6\0\12\0\15\0\1\0\10\0"+
    "\16\0\1\0\2\0\77\0\5\0\57\0\21\0\7\0\4\0\12\0"+
    "\21\0\11\0\14\0\3\0\36\0\15\0\2\0\12\0\54\0\16\0"+
    "\14\0\44\0\24\0\10\0\12\0\3\0\3\0\12\0\44\0\2\0"+
    "\11\0\7\0\53\0\2\0\3\0\20\0\3\0\1\0\25\0\4\0"+
    "\1\0\6\0\1\0\2\0\3\0\1\0\5\0\300\0\72\0\1\0"+
    "\5\0\u0116\0\2\0\6\0\2\0\46\0\2\0\6\0\2\0\10\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\37\0\2\0\65\0"+
    "\1\0\7\0\1\0\1\0\3\0\3\0\1\0\7\0\3\0\4\0"+
    "\2\0\6\0\4\0\15\0\5\0\3\0\1\0\7\0\16\0\5\0"+
    "\32\0\5\0\20\0\2\0\23\0\1\0\13\0\5\0\1\0\12\0"+
    "\1\0\1\0\15\0\1\0\20\0\15\0\3\0\40\0\20\0\15\0"+
    "\4\0\1\0\3\0\14\0\21\0\1\0\4\0\1\0\2\0\12\0"+
    "\1\0\1\0\3\0\5\0\6\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\4\0\1\0\13\0\2\0\4\0\5\0\5\0\4\0\1\0"+
    "\21\0\51\0\u0a77\0\57\0\1\0\57\0\1\0\205\0\6\0\4\0"+
    "\3\0\2\0\14\0\46\0\1\0\1\0\5\0\1\0\2\0\70\0"+
    "\7\0\1\0\17\0\1\0\27\0\11\0\7\0\1\0\7\0\1\0"+
    "\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0"+
    "\7\0\1\0\40\0\57\0\1\0\u01d5\0\3\0\31\0\11\0\6\0"+
    "\1\0\5\0\2\0\5\0\4\0\126\0\2\0\2\0\2\0\3\0"+
    "\1\0\132\0\1\0\4\0\5\0\53\0\1\0\136\0\21\0\40\0"+
    "\60\0\20\0\u0200\0\u19c0\0\100\0\u51fd\0\3\0\u048d\0\103\0\56\0"+
    "\2\0\u010d\0\3\0\20\0\12\0\2\0\24\0\57\0\1\0\4\0"+
    "\12\0\1\0\37\0\2\0\120\0\2\0\45\0\11\0\2\0\147\0"+
    "\2\0\65\0\2\0\11\0\52\0\15\0\1\0\3\0\1\0\4\0"+
    "\1\0\27\0\5\0\4\0\1\0\13\0\1\0\7\0\64\0\14\0"+
    "\2\0\62\0\22\0\12\0\12\0\6\0\22\0\6\0\3\0\1\0"+
    "\1\0\2\0\13\0\34\0\10\0\2\0\27\0\15\0\14\0\35\0"+
    "\3\0\4\0\57\0\16\0\16\0\1\0\12\0\6\0\5\0\1\0"+
    "\12\0\12\0\5\0\1\0\51\0\16\0\11\0\3\0\1\0\10\0"+
    "\2\0\2\0\12\0\6\0\27\0\3\0\1\0\3\0\62\0\1\0"+
    "\1\0\3\0\2\0\2\0\5\0\2\0\1\0\1\0\1\0\30\0"+
    "\3\0\2\0\13\0\5\0\2\0\3\0\2\0\12\0\6\0\2\0"+
    "\6\0\2\0\6\0\11\0\7\0\1\0\7\0\1\0\53\0\1\0"+
    "\16\0\6\0\163\0\10\0\1\0\2\0\2\0\12\0\6\0\u2ba4\0"+
    "\14\0\27\0\4\0\61\0\u2104\0\u016e\0\2\0\152\0\46\0\7\0"+
    "\14\0\5\0\5\0\1\0\1\0\12\0\1\0\15\0\1\0\5\0"+
    "\1\0\1\0\1\0\2\0\1\0\2\0\1\0\154\0\41\0\u016b\0"+
    "\22\0\100\0\2\0\66\0\50\0\15\0\3\0\20\0\20\0\20\0"+
    "\3\0\2\0\30\0\3\0\31\0\1\0\6\0\5\0\1\0\207\0"+
    "\2\0\1\0\4\0\1\0\13\0\12\0\7\0\32\0\4\0\1\0"+
    "\1\0\32\0\13\0\131\0\3\0\6\0\2\0\6\0\2\0\6\0"+
    "\2\0\3\0\3\0\2\0\3\0\2\0\22\0\3\0\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    41,    82,   123,    82,   164,    82,    82,   205,   246, 
      287,   328,   369,   410,   451,   492,   533,   574,   615,   656, 
      697,   738,   779,   820,    82,   861,   902,   943,   984,   164, 
     1025,    82,  1066,    82,  1107,    82,  1148,  1189,  1230,  1271, 
       82,  1312,  1353,  1394,  1435,    82,    82,  1476,  1517,  1558, 
       82,  1599,  1640,  1681,  1722,  1763,  1804,  1845,  1886,  1927, 
     1968,  2009,  2050,  2091,  2132,    82,  2173,  2214,  2255,  2296, 
     2337,  2378,  2419,  2460,  2501,  2542,  2583,  2624,  2665,  2706, 
     2747,  2788,  2829,  2870,  2911,  2952,  2993,    82,  3034,  3075, 
     3116,  3157,  3198,  3239,  3280,  3321,  3362,  3403,  3444,  3485, 
       82,    82,    82,    82,    82,    82,  3526,  3567,  3608,  3649, 
       82,    82,    82,    82,  3690,  3731,  3772,  3813,  3854,  3895, 
     3936,  3977,  4018,  4059,  4100,  4141,  4182,  4223,    82,  4264, 
     4305,  4346,  4387,  4428,  4469,    82,  4510,  4551,  4592,  4633, 
     4674,    82,  4715,  4756,  4797,  4838,  4879,  4920,  4961,    82, 
     5002,  5043,  5084,  5125,  5166,  5207,  5248,  5289,  5330,  5371, 
       82,    82,  5412,  5453,  5494,  5535,  5576,  5617,  5658,  5699, 
     5740,  5781,    82,    82,  5822,  5863,  5904,  5945,    82,  5986, 
       82,  6027,  6068,  6109,    82,    82,  6150,  6191,  6232,  6273, 
     6314,    82,  6355,  6396,  6437,    82,  6478,  6519,  6560,  6601, 
     6642,  6683,  6724,  6765,  6806,  6847,  6888,    82,    82,    82, 
     6929,  6970,  7011,  7052,  7093,    82,  7134,  7175,  7216,    82, 
       82,  7257,  7298,  7339,  7380,  7421,  7462,  7503,    82,  7544, 
     7585,    82,  7626,  7667,  7708,  7749,    82,  7790,    82,    82, 
     7831,  7872,  7913,  7954,  7995,  8036,  8077,  8118,    82,    82, 
       82,  8159,  8200,  8241,  8282,  8323,  8364,  8405,  8446,  8487, 
       82,    82,    82,    82,    82,    82,    82,  8528,  8569,  8610, 
     8651,  8692,    82,  8733,  8774,  8815,  8856,  8897,  8938,  8979, 
     9020,    82,  9061,  9102,  9143,  9184,  9225,    82,  9266,    82, 
       82,  9307,  9348,  9389,    82,  9430,  9471,  9512,  9553,  9594, 
     9635,  9676,  9717,    82,    82,  9758,    82,  9799,  9840,  9881, 
     9922,    82,  9963, 10004, 10045, 10086, 10127, 10168,    82, 10209, 
    10250,    82,    82,    82,    82,    82,    82,    82, 10291, 10332, 
    10373, 10414,    82,    82,    82, 10455, 10496,    82, 10537, 10578, 
       82, 10619,    82,    82, 10660, 10701,    82,    82, 10742, 10783, 
       82, 10824,    82, 10865, 10906,    82,    82,  6150,    82,    82, 
       82,    82, 10947,    82,    82,    82,    82,    82, 10988,    82
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\3\3\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\3\1\15\1\16\1\17\1\20"+
    "\1\3\1\21\1\22\1\23\1\24\1\25\1\3\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\6\3\1\34\1\3"+
    "\1\35\1\3\1\4\2\5\1\36\44\3\53\0\1\5"+
    "\53\0\1\37\55\0\1\40\1\41\1\0\1\42\2\0"+
    "\1\43\6\0\1\44\1\45\2\0\1\46\34\0\1\47"+
    "\2\0\1\50\4\0\1\51\34\0\1\52\4\0\1\53"+
    "\1\54\11\0\1\55\27\0\1\56\2\0\1\57\2\0"+
    "\1\60\1\61\1\62\1\63\4\0\1\64\2\0\1\65"+
    "\3\0\1\66\32\0\1\67\1\0\1\70\52\0\1\71"+
    "\35\0\1\72\1\0\1\73\2\0\1\74\2\0\1\75"+
    "\1\76\37\0\1\77\1\100\5\0\1\101\1\0\1\102"+
    "\3\0\1\103\1\0\1\104\1\0\1\105\30\0\1\106"+
    "\4\0\1\107\50\0\1\110\1\111\10\0\1\112\32\0"+
    "\1\113\1\114\1\0\1\115\1\116\1\117\3\0\1\120"+
    "\4\0\1\121\36\0\1\122\1\123\11\0\1\124\30\0"+
    "\1\125\7\0\1\126\7\0\1\127\44\0\1\130\45\0"+
    "\1\131\1\132\1\133\1\134\1\135\40\0\1\136\1\0"+
    "\1\137\46\0\1\140\1\141\44\0\1\142\2\0\1\143"+
    "\2\0\1\144\14\0\1\145\1\146\1\147\1\150\1\151"+
    "\1\152\30\0\1\153\45\0\1\154\34\0\1\155\56\0"+
    "\1\156\63\0\1\157\45\0\1\160\47\0\1\161\12\0"+
    "\1\162\27\0\1\163\102\0\1\164\13\0\1\165\14\0"+
    "\1\166\45\0\1\167\43\0\1\170\46\0\1\171\101\0"+
    "\1\172\24\0\1\173\41\0\1\174\50\0\1\175\52\0"+
    "\1\176\53\0\1\177\53\0\1\200\45\0\1\201\52\0"+
    "\1\202\40\0\1\203\61\0\1\204\44\0\1\205\53\0"+
    "\1\206\46\0\1\207\43\0\1\210\47\0\1\211\64\0"+
    "\1\212\35\0\1\213\17\0\1\214\43\0\1\215\53\0"+
    "\1\216\37\0\1\217\1\0\1\220\3\0\1\221\1\0"+
    "\1\222\66\0\1\223\17\0\1\224\6\0\1\225\43\0"+
    "\1\226\3\0\1\227\54\0\1\230\44\0\1\231\43\0"+
    "\1\232\4\0\1\233\46\0\1\234\52\0\1\235\3\0"+
    "\1\236\46\0\1\237\44\0\1\240\46\0\1\241\2\0"+
    "\1\242\57\0\1\243\35\0\1\244\3\0\1\245\52\0"+
    "\1\246\1\0\1\247\45\0\1\250\1\251\45\0\1\252"+
    "\47\0\1\253\47\0\1\254\6\0\1\255\53\0\1\256"+
    "\52\0\1\257\36\0\1\260\52\0\1\261\43\0\1\262"+
    "\44\0\1\263\61\0\1\264\50\0\1\265\52\0\1\266"+
    "\44\0\1\267\47\0\1\270\47\0\1\271\54\0\1\272"+
    "\33\0\1\273\57\0\1\274\64\0\1\275\1\0\1\276"+
    "\35\0\1\277\50\0\1\300\61\0\1\301\34\0\1\302"+
    "\50\0\1\303\53\0\1\304\45\0\1\305\62\0\1\306"+
    "\33\0\1\307\51\0\1\310\64\0\1\311\42\0\1\312"+
    "\50\0\1\313\47\0\1\314\53\0\1\315\40\0\1\316"+
    "\64\0\1\317\44\0\1\320\46\0\1\321\45\0\1\322"+
    "\52\0\1\323\44\0\1\324\60\0\1\325\37\0\1\326"+
    "\62\0\1\327\46\0\1\330\41\0\1\331\57\0\1\332"+
    "\42\0\1\333\54\0\1\334\61\0\1\335\53\0\1\336"+
    "\30\0\1\337\66\0\1\340\44\0\1\341\34\0\1\342"+
    "\17\0\1\343\31\0\1\344\7\0\1\345\62\0\1\346"+
    "\32\0\1\347\47\0\1\350\60\0\1\351\41\0\1\352"+
    "\50\0\1\353\50\0\1\354\64\0\1\355\31\0\1\356"+
    "\60\0\1\357\40\0\1\360\60\0\1\361\52\0\1\362"+
    "\53\0\1\363\42\0\1\364\42\0\1\365\53\0\1\366"+
    "\60\0\1\367\45\0\1\370\51\0\1\371\33\0\1\372"+
    "\66\0\1\373\20\0\7\273\1\374\41\273\16\0\1\375"+
    "\55\0\1\376\40\0\1\377\51\0\1\u0100\57\0\1\u0101"+
    "\45\0\1\u0102\63\0\1\u0103\36\0\1\u0104\47\0\1\u0105"+
    "\46\0\1\u0106\47\0\1\u0107\53\0\1\u0108\42\0\1\u0109"+
    "\63\0\1\u010a\35\0\1\u010b\56\0\1\u010c\54\0\1\u010d"+
    "\44\0\1\u010e\60\0\1\u010f\54\0\1\u0110\50\0\1\u0111"+
    "\46\0\1\u0112\40\0\1\u0113\51\0\1\u0114\46\0\1\u0115"+
    "\62\0\1\u0116\47\0\1\u0117\51\0\1\u0118\34\0\1\u0119"+
    "\51\0\1\u011a\54\0\1\u011b\60\0\1\u011c\34\0\1\u011d"+
    "\50\0\1\u011e\44\0\1\u011f\63\0\1\u0120\45\0\1\u0121"+
    "\47\0\1\u0122\54\0\1\u0123\54\0\1\u0124\35\0\1\u0125"+
    "\42\0\1\u0126\53\0\1\u0127\45\0\1\u0128\56\0\1\u0129"+
    "\55\0\1\u012a\43\0\1\u012b\63\0\1\u012c\15\0\6\273"+
    "\1\u012d\1\374\1\273\1\0\37\273\17\0\1\u012e\44\0"+
    "\1\u012f\61\0\1\u0130\41\0\1\u0131\46\0\1\u0132\60\0"+
    "\1\u0133\40\0\1\u0134\60\0\1\u0135\53\0\1\u0136\40\0"+
    "\1\u0137\47\0\1\u0138\46\0\1\u0139\72\0\1\u013a\37\0"+
    "\1\u013b\44\0\1\u013c\63\0\1\u013d\42\0\1\u013e\35\0"+
    "\1\u013f\56\0\1\u0140\44\0\1\u0141\51\0\1\u0142\64\0"+
    "\1\u0143\37\0\1\u0144\53\0\1\u0145\50\0\1\u0146\42\0"+
    "\1\u0147\45\0\1\u0148\62\0\1\u0149\52\0\1\u014a\50\0"+
    "\1\u014b\42\0\1\u014c\53\0\1\u014d\45\0\1\u014e\54\0"+
    "\1\u014f\37\0\1\u0150\35\0\6\273\1\u0151\1\374\41\273"+
    "\20\0\1\u0152\62\0\1\u0153\50\0\1\u0154\42\0\1\u0155"+
    "\44\0\1\u0156\56\0\1\u0157\47\0\1\u0158\47\0\1\u0159"+
    "\56\0\1\u015a\30\0\1\u015b\50\0\1\u015c\55\0\1\u015d"+
    "\51\0\1\u015e\50\0\1\u015f\43\0\1\u0160\66\0\1\u0161"+
    "\37\0\1\u0162\50\0\1\u0163\76\0\1\u0164\26\0\1\u0165"+
    "\24\0\7\273\1\374\1\u0166\40\273\17\0\1\u0167\50\0"+
    "\1\u0168\52\0\1\u0169\44\0\1\u016a\46\0\1\u016b\52\0"+
    "\1\u016c\61\0\1\u016d\51\0\1\u016e\36\0\1\u016f\50\0"+
    "\1\u0170\50\0\1\u0171\53\0\1\u0172\30\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  1,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  0,  9, 
     0,  9,  0,  9,  0,  0,  0,  0,  9,  0,  0,  0,  0,  9,  9,  0, 
     0,  0,  9,  0,  0,  1,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0, 
     0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  1,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  1,  9,  9,  9,  9,  9,  9,  0,  0,  0,  0,  9,  9, 
     9,  9,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  9,  0,  0, 
     0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  0,  0, 
     0,  0,  9,  0,  9,  0,  0,  0,  9,  9,  0,  0,  0,  0,  0,  9, 
     0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, 
     9,  9,  1,  0,  0,  0,  0,  9,  0,  0,  0,  9,  9,  0,  0,  0, 
     0,  0,  0,  0,  9,  0,  0,  9,  0,  0,  0,  0,  9,  0,  9,  9, 
     0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  9,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  0,  0, 
     9,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  9, 
     0,  9,  9,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  9, 
     9,  0,  9,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  9,  0, 
     0,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  0,  9,  9,  9,  0, 
     0,  9,  0,  0,  9,  0,  9,  9,  0,  0,  9,  9,  0,  0,  9,  0, 
     9,  0,  0,  9,  9,  1,  9,  9,  9,  9,  0,  9,  9,  9,  9,  9, 
     0,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[11029];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2318) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 15: 
          { return symbolFactory.newSymbol("B", B);  }
        case 371: break;
        case 14: 
          { return symbolFactory.newSymbol("A", A);  }
        case 372: break;
        case 12: 
          { return symbolFactory.newSymbol("P", P);  }
        case 373: break;
        case 18: 
          { return symbolFactory.newSymbol("S", S);  }
        case 374: break;
        case 21: 
          { return symbolFactory.newSymbol("U", U);  }
        case 375: break;
        case 22: 
          { return symbolFactory.newSymbol("I", I);  }
        case 376: break;
        case 24: 
          { return symbolFactory.newSymbol("Q", Q);  }
        case 377: break;
        case 2: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 13: 
        case 16: 
        case 17: 
        case 19: 
        case 20: 
        case 23: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 378: break;
        case 357: 
          {  /* ignore */  }
        case 379: break;
        case 3: 
        case 4: 
          {                                }
        case 380: break;
        case 334: 
          { return symbolFactory.newSymbol("KEYGEN", KEYGEN);  }
        case 381: break;
        case 333: 
          { return symbolFactory.newSymbol("IFRAME", IFRAME);  }
        case 382: break;
        case 332: 
          { return symbolFactory.newSymbol("ILAYER", ILAYER);  }
        case 383: break;
        case 327: 
          { return symbolFactory.newSymbol("LEGEND", LEGEND);  }
        case 384: break;
        case 326: 
          { return symbolFactory.newSymbol("SELECT", SELECT);  }
        case 385: break;
        case 325: 
          { return symbolFactory.newSymbol("SERVER", SERVER);  }
        case 386: break;
        case 324: 
          { return symbolFactory.newSymbol("SPACER", SPACER);  }
        case 387: break;
        case 323: 
          { return symbolFactory.newSymbol("STRIKE", STRIKE);  }
        case 388: break;
        case 322: 
          { return symbolFactory.newSymbol("STRONG", STRONG);  }
        case 389: break;
        case 321: 
          { return symbolFactory.newSymbol("SCRIPT", SCRIPT);  }
        case 390: break;
        case 318: 
          { return symbolFactory.newSymbol("NEXTID", NEXTID);  }
        case 391: break;
        case 311: 
          { return symbolFactory.newSymbol("APPLET", APPLET);  }
        case 392: break;
        case 306: 
          { return symbolFactory.newSymbol("CENTER", CENTER);  }
        case 393: break;
        case 304: 
          { return symbolFactory.newSymbol("OBJECT", OBJECT);  }
        case 394: break;
        case 303: 
          { return symbolFactory.newSymbol("OPTION", OPTION);  }
        case 395: break;
        case 191: 
          { return symbolFactory.newSymbol("CODE", CODE);  }
        case 396: break;
        case 195: 
          { return symbolFactory.newSymbol("CITE", CITE);  }
        case 397: break;
        case 207: 
          { return symbolFactory.newSymbol("ABBR", ABBR);  }
        case 398: break;
        case 208: 
          { return symbolFactory.newSymbol("AREA", AREA);  }
        case 399: break;
        case 209: 
          { return symbolFactory.newSymbol("BODY", BODY);  }
        case 400: break;
        case 210: 
          { return symbolFactory.newSymbol("BASE", BASE);  }
        case 401: break;
        case 215: 
          { return symbolFactory.newSymbol("NOBR", NOBR);  }
        case 402: break;
        case 219: 
          { return symbolFactory.newSymbol("META", META);  }
        case 403: break;
        case 220: 
          { return symbolFactory.newSymbol("MENU", MENU);  }
        case 404: break;
        case 228: 
          { return symbolFactory.newSymbol("SPAN", SPAN);  }
        case 405: break;
        case 231: 
          { return symbolFactory.newSymbol("SAMP", SAMP);  }
        case 406: break;
        case 236: 
          { return symbolFactory.newSymbol("LINK", LINK);  }
        case 407: break;
        case 238: 
          { return symbolFactory.newSymbol("FORM", FORM);  }
        case 408: break;
        case 239: 
          { return symbolFactory.newSymbol("FONT", FONT);  }
        case 409: break;
        case 248: 
          { return symbolFactory.newSymbol("HTML", HTML);  }
        case 410: break;
        case 249: 
          { return symbolFactory.newSymbol("HEAD", HEAD);  }
        case 411: break;
        case 250: 
          { return symbolFactory.newSymbol("href", href);  }
        case 412: break;
        case 105: 
          { return symbolFactory.newSymbol("H6", H6);  }
        case 413: break;
        case 104: 
          { return symbolFactory.newSymbol("H5", H5);  }
        case 414: break;
        case 103: 
          { return symbolFactory.newSymbol("H4", H4);  }
        case 415: break;
        case 102: 
          { return symbolFactory.newSymbol("H3", H3);  }
        case 416: break;
        case 101: 
          { return symbolFactory.newSymbol("H2", H2);  }
        case 417: break;
        case 100: 
          { return symbolFactory.newSymbol("H1", H1);  }
        case 418: break;
        case 99: 
          { return symbolFactory.newSymbol("HR", HR);  }
        case 419: break;
        case 87: 
          { return symbolFactory.newSymbol("UL", UL);  }
        case 420: break;
        case 83: 
          { return symbolFactory.newSymbol("LI", LI);  }
        case 421: break;
        case 65: 
          { return symbolFactory.newSymbol("BR", BR);  }
        case 422: break;
        case 56: 
          { return symbolFactory.newSymbol("EM", EM);  }
        case 423: break;
        case 53: 
          { return symbolFactory.newSymbol("TH", TH);  }
        case 424: break;
        case 50: 
          { return symbolFactory.newSymbol("TR", TR);  }
        case 425: break;
        case 46: 
          { return symbolFactory.newSymbol("TT", TT);  }
        case 426: break;
        case 7: 
          { return symbolFactory.newSymbol("SL", SL);  }
        case 427: break;
        case 6: 
          { return symbolFactory.newSymbol("GT", GT);  }
        case 428: break;
        case 5: 
          { return symbolFactory.newSymbol("LT", LT);  }
        case 429: break;
        case 31: 
          { return symbolFactory.newSymbol("DD", DD);  }
        case 430: break;
        case 33: 
          { return symbolFactory.newSymbol("DT", DT);  }
        case 431: break;
        case 35: 
          { return symbolFactory.newSymbol("DL", DL);  }
        case 432: break;
        case 40: 
          { return symbolFactory.newSymbol("OL", OL);  }
        case 433: break;
        case 45: 
          { return symbolFactory.newSymbol("TD", TD);  }
        case 434: break;
        case 356: 
          { return symbolFactory.newSymbol("version", version);  }
        case 435: break;
        case 355: 
          { return symbolFactory.newSymbol("ISINDEX", ISINDEX);  }
        case 436: break;
        case 352: 
          { return symbolFactory.newSymbol("LISTING", LISTING);  }
        case 437: break;
        case 350: 
          { return symbolFactory.newSymbol("MARQUEE", MARQUEE);  }
        case 438: break;
        case 347: 
          { return symbolFactory.newSymbol("NOEMBED", NOEMBED);  }
        case 439: break;
        case 346: 
          { return symbolFactory.newSymbol("BGSOUND", BGSOUND);  }
        case 440: break;
        case 343: 
          { return symbolFactory.newSymbol("ACRONYM", ACRONYM);  }
        case 441: break;
        case 342: 
          { return symbolFactory.newSymbol("ADDRESS", ADDRESS);  }
        case 442: break;
        case 340: 
          { return symbolFactory.newSymbol("CAPTION", CAPTION);  }
        case 443: break;
        case 337: 
          { return symbolFactory.newSymbol("DOCTYPE", DOCTYPE);  }
        case 444: break;
        case 369: 
          { return symbolFactory.newSymbol("BLOCKQUOTE", BLOCKQUOTE);  }
        case 445: break;
        case 113: 
          { return symbolFactory.newSymbol("DIV", DIV);  }
        case 446: break;
        case 112: 
          { return symbolFactory.newSymbol("DIR", DIR);  }
        case 447: break;
        case 111: 
          { return symbolFactory.newSymbol("DFN", DFN);  }
        case 448: break;
        case 110: 
          { return symbolFactory.newSymbol("DEL", DEL);  }
        case 449: break;
        case 117: 
          { return symbolFactory.newSymbol("COL", COL);  }
        case 450: break;
        case 128: 
          { return symbolFactory.newSymbol("PRE", PRE);  }
        case 451: break;
        case 135: 
          { return symbolFactory.newSymbol("BDO", BDO);  }
        case 452: break;
        case 141: 
          { return symbolFactory.newSymbol("BIG", BIG);  }
        case 453: break;
        case 149: 
          { return symbolFactory.newSymbol("MAP", MAP);  }
        case 454: break;
        case 160: 
          { return symbolFactory.newSymbol("SUP", SUP);  }
        case 455: break;
        case 161: 
          { return symbolFactory.newSymbol("SUB", SUB);  }
        case 456: break;
        case 172: 
          { return symbolFactory.newSymbol("INS", INS);  }
        case 457: break;
        case 173: 
          { return symbolFactory.newSymbol("IMG", IMG);  }
        case 458: break;
        case 178: 
          { return symbolFactory.newSymbol("KBD", KBD);  }
        case 459: break;
        case 180: 
          { return symbolFactory.newSymbol("VAR", VAR);  }
        case 460: break;
        case 184: 
          { return symbolFactory.newSymbol("XMP", XMP);  }
        case 461: break;
        case 185: 
          { return symbolFactory.newSymbol("WBR", WBR);  }
        case 462: break;
        case 367: 
          { return symbolFactory.newSymbol("FIELDSET", FIELDSET);  }
        case 463: break;
        case 366: 
          { return symbolFactory.newSymbol("FRAMESET", FRAMESET);  }
        case 464: break;
        case 365: 
          { return symbolFactory.newSymbol("MULTICOL", MULTICOL);  }
        case 465: break;
        case 364: 
          { return symbolFactory.newSymbol("NOFRAMES", NOFRAMES);  }
        case 466: break;
        case 363: 
          { return symbolFactory.newSymbol("NOSCRIPT", NOSCRIPT);  }
        case 467: break;
        case 361: 
          { return symbolFactory.newSymbol("BASEFONT", BASEFONT);  }
        case 468: break;
        case 360: 
          { return symbolFactory.newSymbol("TEXTAREA", TEXTAREA);  }
        case 469: break;
        case 359: 
          { return symbolFactory.newSymbol("COLGROUP", COLGROUP);  }
        case 470: break;
        case 358: 
          { return symbolFactory.newSymbol("OPTGROUP", OPTGROUP);  }
        case 471: break;
        case 294: 
          { return symbolFactory.newSymbol("INPUT", INPUT);  }
        case 472: break;
        case 290: 
          { return symbolFactory.newSymbol("LABEL", LABEL);  }
        case 473: break;
        case 289: 
          { return symbolFactory.newSymbol("LAYER", LAYER);  }
        case 474: break;
        case 287: 
          { return symbolFactory.newSymbol("SMALL", SMALL);  }
        case 475: break;
        case 281: 
          { return symbolFactory.newSymbol("STYLE", STYLE);  }
        case 476: break;
        case 272: 
          { return symbolFactory.newSymbol("BLINK", BLINK);  }
        case 477: break;
        case 266: 
          { return symbolFactory.newSymbol("EMBED", EMBED);  }
        case 478: break;
        case 260: 
          { return symbolFactory.newSymbol("TABLE", TABLE);  }
        case 479: break;
        case 261: 
          { return symbolFactory.newSymbol("TBODY", TBODY);  }
        case 480: break;
        case 262: 
          { return symbolFactory.newSymbol("TFOOT", TFOOT);  }
        case 481: break;
        case 263: 
          { return symbolFactory.newSymbol("TITLE", TITLE);  }
        case 482: break;
        case 264: 
          { return symbolFactory.newSymbol("THEAD", THEAD);  }
        case 483: break;
        case 265: 
          { return symbolFactory.newSymbol("PARAM", PARAM);  }
        case 484: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
