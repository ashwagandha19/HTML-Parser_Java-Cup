/* The following code was generated by JFlex 1.3.5 on 20.12.2022, 15:05 */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 20.12.2022, 15:05 from the specification file
 * <tt>file:/C:/Users/Vlad/git/repository/Laborator_PT/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\16\0\4\0\1\3\1\5"+
    "\2\0\1\0\5\0\1\7\2\0\1\6\1\0\1\11\1\0\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\3\0\2\0\1\4\1\21\1\10"+
    "\2\0\1\22\1\23\1\14\1\12\1\20\1\31\1\32\1\40\1\34"+
    "\1\50\1\35\1\30\1\26\1\25\1\13\1\17\1\36\1\24\1\27"+
    "\1\15\1\33\1\37\1\51\1\47\1\16\1\0\4\0\1\0\1\0"+
    "\1\22\1\23\1\14\1\12\1\20\1\31\1\32\1\40\1\34\1\50"+
    "\1\35\1\30\1\26\1\25\1\13\1\17\1\36\1\24\1\27\1\15"+
    "\1\33\1\37\1\51\1\47\1\16\1\0\1\0\1\0\2\0\41\0"+
    "\2\0\4\0\4\0\1\0\2\0\1\0\7\0\1\0\4\0\1\0"+
    "\5\0\27\0\1\0\37\0\1\0\u01ca\0\4\0\14\0\16\0\5\0"+
    "\7\0\1\0\1\0\1\0\21\0\160\0\5\0\1\0\2\0\2\0"+
    "\4\0\1\0\1\0\6\0\1\0\1\0\3\0\1\0\1\0\1\0"+
    "\24\0\1\0\123\0\1\0\213\0\1\0\5\0\2\0\246\0\1\0"+
    "\46\0\2\0\1\0\6\0\51\0\6\0\1\0\1\0\55\0\1\0"+
    "\1\0\1\0\2\0\1\0\2\0\1\0\1\0\10\0\33\0\4\0"+
    "\4\0\15\0\6\0\5\0\1\0\4\0\13\0\1\0\1\0\3\0"+
    "\53\0\37\0\4\0\2\0\1\0\143\0\1\0\1\0\10\0\1\0"+
    "\6\0\2\0\2\0\1\0\4\0\2\0\12\0\3\0\2\0\1\0"+
    "\17\0\1\0\1\0\1\0\36\0\33\0\2\0\131\0\13\0\1\0"+
    "\16\0\12\0\41\0\11\0\2\0\4\0\1\0\2\0\1\0\30\0"+
    "\4\0\1\0\11\0\1\0\3\0\1\0\5\0\22\0\31\0\3\0"+
    "\4\0\13\0\65\0\25\0\1\0\22\0\13\0\61\0\66\0\3\0"+
    "\1\0\22\0\1\0\7\0\12\0\2\0\2\0\12\0\1\0\20\0"+
    "\3\0\1\0\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0"+
    "\1\0\3\0\4\0\2\0\1\0\1\0\7\0\2\0\2\0\2\0"+
    "\3\0\1\0\10\0\1\0\4\0\2\0\1\0\3\0\2\0\2\0"+
    "\12\0\4\0\7\0\2\0\1\0\1\0\2\0\3\0\1\0\6\0"+
    "\4\0\2\0\2\0\26\0\1\0\7\0\1\0\2\0\1\0\2\0"+
    "\1\0\2\0\2\0\1\0\1\0\5\0\4\0\2\0\2\0\3\0"+
    "\3\0\1\0\7\0\4\0\1\0\1\0\7\0\14\0\3\0\1\0"+
    "\13\0\3\0\1\0\11\0\1\0\3\0\1\0\26\0\1\0\7\0"+
    "\1\0\2\0\1\0\5\0\2\0\1\0\1\0\10\0\1\0\3\0"+
    "\1\0\3\0\2\0\1\0\17\0\2\0\2\0\2\0\12\0\1\0"+
    "\1\0\7\0\1\0\6\0\1\0\3\0\1\0\10\0\2\0\2\0"+
    "\2\0\26\0\1\0\7\0\1\0\2\0\1\0\5\0\2\0\1\0"+
    "\1\0\7\0\2\0\2\0\2\0\3\0\7\0\3\0\4\0\2\0"+
    "\1\0\3\0\2\0\2\0\12\0\1\0\1\0\20\0\1\0\1\0"+
    "\1\0\6\0\3\0\3\0\1\0\4\0\3\0\2\0\1\0\1\0"+
    "\1\0\2\0\3\0\2\0\3\0\3\0\3\0\14\0\4\0\5\0"+
    "\3\0\3\0\1\0\4\0\2\0\1\0\6\0\1\0\16\0\12\0"+
    "\11\0\1\0\6\0\5\0\10\0\1\0\3\0\1\0\27\0\1\0"+
    "\20\0\3\0\1\0\7\0\1\0\3\0\1\0\4\0\7\0\2\0"+
    "\1\0\3\0\5\0\2\0\2\0\2\0\12\0\20\0\1\0\3\0"+
    "\1\0\10\0\1\0\3\0\1\0\27\0\1\0\12\0\1\0\5\0"+
    "\2\0\1\0\1\0\7\0\1\0\3\0\1\0\4\0\7\0\2\0"+
    "\7\0\1\0\1\0\2\0\2\0\2\0\12\0\1\0\2\0\15\0"+
    "\4\0\11\0\1\0\3\0\1\0\51\0\2\0\1\0\7\0\1\0"+
    "\3\0\1\0\4\0\1\0\5\0\3\0\1\0\7\0\3\0\2\0"+
    "\2\0\12\0\12\0\6\0\1\0\3\0\1\0\22\0\3\0\30\0"+
    "\1\0\11\0\1\0\1\0\2\0\7\0\3\0\1\0\4\0\6\0"+
    "\1\0\1\0\1\0\10\0\6\0\12\0\2\0\2\0\15\0\60\0"+
    "\1\0\2\0\7\0\4\0\10\0\10\0\1\0\12\0\47\0\2\0"+
    "\1\0\1\0\1\0\5\0\1\0\30\0\1\0\1\0\1\0\12\0"+
    "\1\0\2\0\11\0\1\0\2\0\5\0\1\0\1\0\1\0\6\0"+
    "\2\0\12\0\2\0\4\0\40\0\1\0\27\0\2\0\6\0\12\0"+
    "\13\0\1\0\1\0\1\0\1\0\1\0\4\0\2\0\10\0\1\0"+
    "\44\0\4\0\24\0\1\0\2\0\5\0\13\0\1\0\44\0\11\0"+
    "\1\0\71\0\53\0\24\0\1\0\12\0\6\0\6\0\4\0\4\0"+
    "\3\0\1\0\3\0\2\0\7\0\3\0\4\0\15\0\14\0\1\0"+
    "\17\0\2\0\46\0\1\0\1\0\5\0\1\0\2\0\53\0\1\0"+
    "\u014d\0\1\0\4\0\2\0\7\0\1\0\1\0\1\0\4\0\2\0"+
    "\51\0\1\0\4\0\2\0\41\0\1\0\4\0\2\0\7\0\1\0"+
    "\1\0\1\0\4\0\2\0\17\0\1\0\71\0\1\0\4\0\2\0"+
    "\103\0\2\0\3\0\40\0\20\0\20\0\126\0\2\0\6\0\3\0"+
    "\u026c\0\2\0\21\0\1\0\32\0\5\0\113\0\3\0\13\0\7\0"+
    "\15\0\1\0\4\0\3\0\13\0\22\0\3\0\13\0\22\0\2\0"+
    "\14\0\15\0\1\0\3\0\1\0\2\0\14\0\64\0\40\0\3\0"+
    "\1\0\3\0\2\0\1\0\2\0\12\0\41\0\4\0\1\0\12\0"+
    "\6\0\131\0\7\0\5\0\2\0\42\0\1\0\1\0\5\0\106\0"+
    "\12\0\37\0\1\0\14\0\4\0\14\0\12\0\12\0\36\0\2\0"+
    "\5\0\13\0\54\0\4\0\32\0\6\0\12\0\46\0\27\0\5\0"+
    "\4\0\65\0\12\0\1\0\35\0\2\0\13\0\6\0\12\0\15\0"+
    "\1\0\10\0\16\0\1\0\2\0\77\0\5\0\57\0\21\0\7\0"+
    "\4\0\12\0\21\0\11\0\14\0\3\0\36\0\15\0\2\0\12\0"+
    "\54\0\16\0\14\0\44\0\24\0\10\0\12\0\3\0\3\0\12\0"+
    "\44\0\2\0\11\0\7\0\53\0\2\0\3\0\20\0\3\0\1\0"+
    "\25\0\4\0\1\0\6\0\1\0\2\0\3\0\1\0\5\0\300\0"+
    "\72\0\1\0\5\0\u0116\0\2\0\6\0\2\0\46\0\2\0\6\0"+
    "\2\0\10\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\37\0"+
    "\2\0\65\0\1\0\7\0\1\0\1\0\3\0\3\0\1\0\7\0"+
    "\3\0\4\0\2\0\6\0\4\0\15\0\5\0\3\0\1\0\7\0"+
    "\16\0\5\0\32\0\5\0\20\0\2\0\23\0\1\0\13\0\5\0"+
    "\1\0\12\0\1\0\1\0\15\0\1\0\20\0\15\0\3\0\40\0"+
    "\20\0\15\0\4\0\1\0\3\0\14\0\21\0\1\0\4\0\1\0"+
    "\2\0\12\0\1\0\1\0\3\0\5\0\6\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\4\0\1\0\13\0\2\0\4\0\5\0\5\0"+
    "\4\0\1\0\21\0\51\0\u0a77\0\57\0\1\0\57\0\1\0\205\0"+
    "\6\0\4\0\3\0\2\0\14\0\46\0\1\0\1\0\5\0\1\0"+
    "\2\0\70\0\7\0\1\0\17\0\1\0\27\0\11\0\7\0\1\0"+
    "\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0"+
    "\7\0\1\0\7\0\1\0\40\0\57\0\1\0\u01d5\0\3\0\31\0"+
    "\11\0\6\0\1\0\5\0\2\0\5\0\4\0\126\0\2\0\2\0"+
    "\2\0\3\0\1\0\132\0\1\0\4\0\5\0\53\0\1\0\136\0"+
    "\21\0\40\0\60\0\20\0\u0200\0\u19c0\0\100\0\u51fd\0\3\0\u048d\0"+
    "\103\0\56\0\2\0\u010d\0\3\0\20\0\12\0\2\0\24\0\57\0"+
    "\1\0\4\0\12\0\1\0\37\0\2\0\120\0\2\0\45\0\11\0"+
    "\2\0\147\0\2\0\65\0\2\0\11\0\52\0\15\0\1\0\3\0"+
    "\1\0\4\0\1\0\27\0\5\0\4\0\1\0\13\0\1\0\7\0"+
    "\64\0\14\0\2\0\62\0\22\0\12\0\12\0\6\0\22\0\6\0"+
    "\3\0\1\0\1\0\2\0\13\0\34\0\10\0\2\0\27\0\15\0"+
    "\14\0\35\0\3\0\4\0\57\0\16\0\16\0\1\0\12\0\6\0"+
    "\5\0\1\0\12\0\12\0\5\0\1\0\51\0\16\0\11\0\3\0"+
    "\1\0\10\0\2\0\2\0\12\0\6\0\27\0\3\0\1\0\3\0"+
    "\62\0\1\0\1\0\3\0\2\0\2\0\5\0\2\0\1\0\1\0"+
    "\1\0\30\0\3\0\2\0\13\0\5\0\2\0\3\0\2\0\12\0"+
    "\6\0\2\0\6\0\2\0\6\0\11\0\7\0\1\0\7\0\1\0"+
    "\53\0\1\0\16\0\6\0\163\0\10\0\1\0\2\0\2\0\12\0"+
    "\6\0\u2ba4\0\14\0\27\0\4\0\61\0\u2104\0\u016e\0\2\0\152\0"+
    "\46\0\7\0\14\0\5\0\5\0\1\0\1\0\12\0\1\0\15\0"+
    "\1\0\5\0\1\0\1\0\1\0\2\0\1\0\2\0\1\0\154\0"+
    "\41\0\u016b\0\22\0\100\0\2\0\66\0\50\0\15\0\3\0\20\0"+
    "\20\0\20\0\3\0\2\0\30\0\3\0\31\0\1\0\6\0\5\0"+
    "\1\0\207\0\2\0\1\0\4\0\1\0\13\0\12\0\7\0\32\0"+
    "\4\0\1\0\1\0\32\0\13\0\131\0\3\0\6\0\2\0\6\0"+
    "\2\0\6\0\2\0\3\0\3\0\2\0\3\0\2\0\22\0\3\0"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    42,    84,   126,    84,   168,    84,    84,   210,   252, 
      294,   336,   378,   420,    84,   462,   504,   546,   588,   630, 
      672,   714,   756,   798,   840,    84,   882,   924,   966,  1008, 
      168,  1050,    84,  1092,    84,  1134,    84,  1176,  1218,  1260, 
     1302,    84,  1344,  1386,  1428,  1470,    84,    84,  1512,  1554, 
     1596,    84,  1638,  1680,  1722,  1764,  1806,  1848,  1890,  1932, 
     1974,  2016,  2058,  2100,  2142,  2184,    84,  2226,  2268,  2310, 
     2352,  2394,  2436,  2478,  2520,  2562,  2604,  2646,  2688,  2730, 
     2772,  2814,  2856,  2898,  2940,  2982,  3024,  3066,    84,  3108, 
     3150,  3192,  3234,  3276,  3318,  3360,  3402,  3444,  3486,  3528, 
     3570,    84,    84,    84,    84,    84,    84,  3612,  3654,  3696, 
     3738,    84,    84,    84,    84,  3780,  3822,  3864,  3906,  3948, 
     3990,  4032,  4074,  4116,  4158,  4200,  4242,  4284,  4326,    84, 
     4368,  4410,  4452,  4494,  4536,  4578,    84,  4620,  4662,  4704, 
     4746,  4788,    84,  4830,  4872,  4914,  4956,  4998,  5040,  5082, 
       84,  5124,  5166,  5208,  5250,  5292,  5334,  5376,  5418,  5460, 
     5502,    84,    84,  5544,  5586,  5628,  5670,  5712,  5754,  5796, 
     5838,  5880,  5922,    84,    84,  5964,  6006,  6048,  6090,    84, 
     6132,    84,  6174,  6216,  6258,    84,    84,  6300,  6342,  6384, 
     6426,  6468,    84,  6510,  6552,  6594,    84,  6636,  6678,  6720, 
     6762,  6804,  6846,  6888,  6930,  6972,  7014,  7056,    84,    84, 
       84,  7098,  7140,  7182,  7224,  7266,    84,  7308,  7350,  7392, 
       84,    84,  7434,  7476,  7518,  7560,  7602,  7644,  7686,    84, 
     7728,  7770,    84,  7812,  7854,  7896,  7938,    84,  7980,    84, 
       84,  8022,  8064,  8106,  8148,  8190,  8232,  8274,  8316,    84, 
       84,    84,  8358,  8400,  8442,  8484,  8526,  8568,  8610,  8652, 
     8694,    84,    84,    84,    84,    84,    84,    84,  8736,  8778, 
     8820,  8862,  8904,    84,  8946,  8988,  9030,  9072,  9114,  9156, 
     9198,  9240,    84,  9282,  9324,  9366,  9408,  9450,    84,  9492, 
       84,    84,  9534,  9576,  9618,    84,  9660,  9702,  9744,  9786, 
     9828,  9870,  9912,  9954,    84,    84,  9996,    84, 10038, 10080, 
    10122, 10164,    84, 10206, 10248, 10290, 10332, 10374, 10416,    84, 
    10458, 10500,    84,    84,    84,    84,    84,    84,    84, 10542, 
    10584, 10626, 10668,    84,    84,    84, 10710, 10752,    84, 10794, 
    10836,    84, 10878,    84,    84, 10920, 10962,    84,    84, 11004, 
    11046,    84, 11088,    84, 11130, 11172,    84,    84,  6300,    84, 
       84,    84,    84, 11214,    84,    84,    84,    84,    84, 11256, 
       84
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\3\3\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\3\1\15\1\16\1\17\1\20"+
    "\1\21\1\3\1\22\1\23\1\24\1\25\1\26\1\3"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\6\3\1\35"+
    "\1\3\1\36\1\3\1\4\2\5\1\37\45\3\54\0"+
    "\1\5\54\0\1\40\56\0\1\41\1\42\1\0\1\43"+
    "\2\0\1\44\7\0\1\45\1\46\2\0\1\47\34\0"+
    "\1\50\3\0\1\51\4\0\1\52\34\0\1\53\4\0"+
    "\1\54\1\0\1\55\11\0\1\56\27\0\1\57\2\0"+
    "\1\60\2\0\1\61\1\0\1\62\1\63\1\64\4\0"+
    "\1\65\2\0\1\66\3\0\1\67\33\0\1\70\1\0"+
    "\1\71\53\0\1\72\35\0\1\73\1\0\1\74\2\0"+
    "\1\75\3\0\1\76\1\77\37\0\1\100\1\101\6\0"+
    "\1\102\1\0\1\103\3\0\1\104\1\0\1\105\1\0"+
    "\1\106\30\0\1\107\4\0\1\110\51\0\1\111\1\0"+
    "\1\112\10\0\1\113\32\0\1\114\1\115\1\0\1\116"+
    "\1\117\1\0\1\120\3\0\1\121\4\0\1\122\36\0"+
    "\1\123\1\0\1\124\11\0\1\125\30\0\1\126\10\0"+
    "\1\127\7\0\1\130\45\0\1\131\46\0\1\132\1\133"+
    "\1\134\1\135\1\136\40\0\1\137\2\0\1\140\46\0"+
    "\1\141\1\0\1\142\44\0\1\143\2\0\1\144\3\0"+
    "\1\145\14\0\1\146\1\147\1\150\1\151\1\152\1\153"+
    "\31\0\1\154\46\0\1\155\34\0\1\156\57\0\1\157"+
    "\65\0\1\160\46\0\1\161\50\0\1\162\12\0\1\163"+
    "\27\0\1\164\104\0\1\165\13\0\1\166\15\0\1\167"+
    "\46\0\1\170\43\0\1\171\47\0\1\172\103\0\1\173"+
    "\25\0\1\174\41\0\1\175\51\0\1\176\53\0\1\177"+
    "\54\0\1\200\55\0\1\201\45\0\1\202\54\0\1\203"+
    "\40\0\1\204\63\0\1\205\44\0\1\206\55\0\1\207"+
    "\46\0\1\210\44\0\1\211\50\0\1\212\66\0\1\213"+
    "\35\0\1\214\20\0\1\215\44\0\1\216\54\0\1\217"+
    "\37\0\1\220\2\0\1\221\3\0\1\222\1\0\1\223"+
    "\67\0\1\224\17\0\1\225\7\0\1\226\43\0\1\227"+
    "\4\0\1\230\55\0\1\231\45\0\1\232\43\0\1\233"+
    "\5\0\1\234\47\0\1\235\53\0\1\236\3\0\1\237"+
    "\47\0\1\240\45\0\1\241\46\0\1\242\3\0\1\243"+
    "\60\0\1\244\35\0\1\245\4\0\1\246\53\0\1\247"+
    "\1\0\1\250\46\0\1\251\1\252\46\0\1\253\47\0"+
    "\1\254\50\0\1\255\7\0\1\256\54\0\1\257\53\0"+
    "\1\260\37\0\1\261\53\0\1\262\43\0\1\263\45\0"+
    "\1\264\63\0\1\265\51\0\1\266\53\0\1\267\45\0"+
    "\1\270\47\0\1\271\50\0\1\272\56\0\1\273\33\0"+
    "\1\274\60\0\1\275\66\0\1\276\1\0\1\277\35\0"+
    "\1\300\51\0\1\301\63\0\1\302\34\0\1\303\51\0"+
    "\1\304\54\0\1\305\46\0\1\306\64\0\1\307\33\0"+
    "\1\310\52\0\1\311\66\0\1\312\43\0\1\313\51\0"+
    "\1\314\47\0\1\315\55\0\1\316\40\0\1\317\66\0"+
    "\1\320\45\0\1\321\47\0\1\322\45\0\1\323\53\0"+
    "\1\324\45\0\1\325\62\0\1\326\37\0\1\327\64\0"+
    "\1\330\47\0\1\331\41\0\1\332\61\0\1\333\42\0"+
    "\1\334\56\0\1\335\62\0\1\336\54\0\1\337\30\0"+
    "\1\340\70\0\1\341\45\0\1\342\34\0\1\343\20\0"+
    "\1\344\31\0\1\345\10\0\1\346\63\0\1\347\32\0"+
    "\1\350\50\0\1\351\62\0\1\352\41\0\1\353\51\0"+
    "\1\354\51\0\1\355\66\0\1\356\31\0\1\357\62\0"+
    "\1\360\40\0\1\361\62\0\1\362\53\0\1\363\54\0"+
    "\1\364\43\0\1\365\42\0\1\366\55\0\1\367\61\0"+
    "\1\370\46\0\1\371\52\0\1\372\33\0\1\373\70\0"+
    "\1\374\20\0\7\274\1\375\42\274\16\0\1\376\57\0"+
    "\1\377\40\0\1\u0100\52\0\1\u0101\61\0\1\u0102\45\0"+
    "\1\u0103\65\0\1\u0104\37\0\1\u0105\47\0\1\u0106\47\0"+
    "\1\u0107\50\0\1\u0108\54\0\1\u0109\43\0\1\u010a\65\0"+
    "\1\u010b\35\0\1\u010c\57\0\1\u010d\56\0\1\u010e\44\0"+
    "\1\u010f\62\0\1\u0110\55\0\1\u0111\51\0\1\u0112\47\0"+
    "\1\u0113\41\0\1\u0114\52\0\1\u0115\47\0\1\u0116\63\0"+
    "\1\u0117\50\0\1\u0118\52\0\1\u0119\34\0\1\u011a\52\0"+
    "\1\u011b\56\0\1\u011c\61\0\1\u011d\34\0\1\u011e\51\0"+
    "\1\u011f\45\0\1\u0120\65\0\1\u0121\46\0\1\u0122\50\0"+
    "\1\u0123\55\0\1\u0124\55\0\1\u0125\35\0\1\u0126\43\0"+
    "\1\u0127\54\0\1\u0128\46\0\1\u0129\57\0\1\u012a\57\0"+
    "\1\u012b\43\0\1\u012c\65\0\1\u012d\15\0\6\274\1\u012e"+
    "\1\375\1\274\1\0\40\274\17\0\1\u012f\45\0\1\u0130"+
    "\63\0\1\u0131\41\0\1\u0132\47\0\1\u0133\62\0\1\u0134"+
    "\40\0\1\u0135\62\0\1\u0136\54\0\1\u0137\40\0\1\u0138"+
    "\50\0\1\u0139\47\0\1\u013a\74\0\1\u013b\40\0\1\u013c"+
    "\44\0\1\u013d\65\0\1\u013e\43\0\1\u013f\35\0\1\u0140"+
    "\57\0\1\u0141\45\0\1\u0142\52\0\1\u0143\66\0\1\u0144"+
    "\37\0\1\u0145\55\0\1\u0146\51\0\1\u0147\42\0\1\u0148"+
    "\46\0\1\u0149\64\0\1\u014a\53\0\1\u014b\51\0\1\u014c"+
    "\42\0\1\u014d\55\0\1\u014e\45\0\1\u014f\56\0\1\u0150"+
    "\37\0\1\u0151\36\0\6\274\1\u0152\1\375\42\274\20\0"+
    "\1\u0153\64\0\1\u0154\51\0\1\u0155\43\0\1\u0156\44\0"+
    "\1\u0157\60\0\1\u0158\50\0\1\u0159\50\0\1\u015a\57\0"+
    "\1\u015b\30\0\1\u015c\51\0\1\u015d\56\0\1\u015e\52\0"+
    "\1\u015f\51\0\1\u0160\44\0\1\u0161\70\0\1\u0162\37\0"+
    "\1\u0163\51\0\1\u0164\100\0\1\u0165\27\0\1\u0166\24\0"+
    "\7\274\1\375\1\u0167\41\274\17\0\1\u0168\51\0\1\u0169"+
    "\54\0\1\u016a\44\0\1\u016b\47\0\1\u016c\53\0\1\u016d"+
    "\63\0\1\u016e\52\0\1\u016f\36\0\1\u0170\51\0\1\u0171"+
    "\51\0\1\u0172\54\0\1\u0173\31\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  1,  9,  9,  1,  1,  1,  1,  1,  1,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  0, 
     9,  0,  9,  0,  9,  0,  0,  0,  0,  9,  0,  0,  0,  0,  9,  9, 
     0,  0,  0,  9,  0,  0,  1,  0,  0,  1,  0,  0,  0,  0,  0,  0, 
     0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  1,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  1,  9,  9,  9,  9,  9,  9,  0,  0,  0,  0,  9, 
     9,  9,  9,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  9,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  9,  0, 
     0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  0, 
     0,  0,  0,  9,  0,  9,  0,  0,  0,  9,  9,  0,  0,  0,  0,  0, 
     9,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9,  9,  9,  1,  0,  0,  0,  0,  9,  0,  0,  0,  9,  9,  0,  0, 
     0,  0,  0,  0,  0,  9,  0,  0,  9,  0,  0,  0,  0,  9,  0,  9, 
     9,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  9,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  0, 
     0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0, 
     9,  0,  9,  9,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0, 
     9,  9,  0,  9,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  9, 
     0,  0,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  0,  9,  9,  9, 
     0,  0,  9,  0,  0,  9,  0,  9,  9,  0,  0,  9,  9,  0,  0,  9, 
     0,  9,  0,  0,  9,  9,  1,  9,  9,  9,  9,  0,  9,  9,  9,  9, 
     9,  0,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[11298];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2322) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 15: 
          { return symbolFactory.newSymbol("A", A);  }
        case 372: break;
        case 12: 
          { return symbolFactory.newSymbol("P", P);  }
        case 373: break;
        case 16: 
          { return symbolFactory.newSymbol("B", B);  }
        case 374: break;
        case 19: 
          { return symbolFactory.newSymbol("S", S);  }
        case 375: break;
        case 22: 
          { return symbolFactory.newSymbol("U", U);  }
        case 376: break;
        case 23: 
          { return symbolFactory.newSymbol("I", I);  }
        case 377: break;
        case 25: 
          { return symbolFactory.newSymbol("Q", Q);  }
        case 378: break;
        case 2: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 13: 
        case 17: 
        case 18: 
        case 20: 
        case 21: 
        case 24: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 379: break;
        case 358: 
          {  /* ignore */  }
        case 380: break;
        case 3: 
        case 4: 
          {                                }
        case 381: break;
        case 335: 
          { return symbolFactory.newSymbol("KEYGEN", KEYGEN);  }
        case 382: break;
        case 334: 
          { return symbolFactory.newSymbol("IFRAME", IFRAME);  }
        case 383: break;
        case 333: 
          { return symbolFactory.newSymbol("ILAYER", ILAYER);  }
        case 384: break;
        case 328: 
          { return symbolFactory.newSymbol("LEGEND", LEGEND);  }
        case 385: break;
        case 327: 
          { return symbolFactory.newSymbol("SELECT", SELECT);  }
        case 386: break;
        case 326: 
          { return symbolFactory.newSymbol("SERVER", SERVER);  }
        case 387: break;
        case 325: 
          { return symbolFactory.newSymbol("SPACER", SPACER);  }
        case 388: break;
        case 324: 
          { return symbolFactory.newSymbol("STRIKE", STRIKE);  }
        case 389: break;
        case 323: 
          { return symbolFactory.newSymbol("STRONG", STRONG);  }
        case 390: break;
        case 322: 
          { return symbolFactory.newSymbol("SCRIPT", SCRIPT);  }
        case 391: break;
        case 319: 
          { return symbolFactory.newSymbol("NEXTID", NEXTID);  }
        case 392: break;
        case 312: 
          { return symbolFactory.newSymbol("APPLET", APPLET);  }
        case 393: break;
        case 307: 
          { return symbolFactory.newSymbol("CENTER", CENTER);  }
        case 394: break;
        case 305: 
          { return symbolFactory.newSymbol("OBJECT", OBJECT);  }
        case 395: break;
        case 304: 
          { return symbolFactory.newSymbol("OPTION", OPTION);  }
        case 396: break;
        case 192: 
          { return symbolFactory.newSymbol("CODE", CODE);  }
        case 397: break;
        case 196: 
          { return symbolFactory.newSymbol("CITE", CITE);  }
        case 398: break;
        case 208: 
          { return symbolFactory.newSymbol("ABBR", ABBR);  }
        case 399: break;
        case 209: 
          { return symbolFactory.newSymbol("AREA", AREA);  }
        case 400: break;
        case 210: 
          { return symbolFactory.newSymbol("BODY", BODY);  }
        case 401: break;
        case 211: 
          { return symbolFactory.newSymbol("BASE", BASE);  }
        case 402: break;
        case 216: 
          { return symbolFactory.newSymbol("NOBR", NOBR);  }
        case 403: break;
        case 220: 
          { return symbolFactory.newSymbol("META", META);  }
        case 404: break;
        case 221: 
          { return symbolFactory.newSymbol("MENU", MENU);  }
        case 405: break;
        case 229: 
          { return symbolFactory.newSymbol("SPAN", SPAN);  }
        case 406: break;
        case 232: 
          { return symbolFactory.newSymbol("SAMP", SAMP);  }
        case 407: break;
        case 237: 
          { return symbolFactory.newSymbol("LINK", LINK);  }
        case 408: break;
        case 239: 
          { return symbolFactory.newSymbol("FORM", FORM);  }
        case 409: break;
        case 240: 
          { return symbolFactory.newSymbol("FONT", FONT);  }
        case 410: break;
        case 249: 
          { return symbolFactory.newSymbol("HTML", HTML);  }
        case 411: break;
        case 250: 
          { return symbolFactory.newSymbol("HEAD", HEAD);  }
        case 412: break;
        case 251: 
          { return symbolFactory.newSymbol("href", href);  }
        case 413: break;
        case 106: 
          { return symbolFactory.newSymbol("H6", H6);  }
        case 414: break;
        case 105: 
          { return symbolFactory.newSymbol("H5", H5);  }
        case 415: break;
        case 104: 
          { return symbolFactory.newSymbol("H4", H4);  }
        case 416: break;
        case 103: 
          { return symbolFactory.newSymbol("H3", H3);  }
        case 417: break;
        case 102: 
          { return symbolFactory.newSymbol("H2", H2);  }
        case 418: break;
        case 101: 
          { return symbolFactory.newSymbol("H1", H1);  }
        case 419: break;
        case 100: 
          { return symbolFactory.newSymbol("HR", HR);  }
        case 420: break;
        case 88: 
          { return symbolFactory.newSymbol("UL", UL);  }
        case 421: break;
        case 84: 
          { return symbolFactory.newSymbol("LI", LI);  }
        case 422: break;
        case 66: 
          { return symbolFactory.newSymbol("BR", BR);  }
        case 423: break;
        case 57: 
          { return symbolFactory.newSymbol("EM", EM);  }
        case 424: break;
        case 54: 
          { return symbolFactory.newSymbol("TH", TH);  }
        case 425: break;
        case 51: 
          { return symbolFactory.newSymbol("TR", TR);  }
        case 426: break;
        case 47: 
          { return symbolFactory.newSymbol("TT", TT);  }
        case 427: break;
        case 46: 
          { return symbolFactory.newSymbol("TD", TD);  }
        case 428: break;
        case 14: 
          { return symbolFactory.newSymbol("EQ", EQ);  }
        case 429: break;
        case 7: 
          { return symbolFactory.newSymbol("SL", SL);  }
        case 430: break;
        case 6: 
          { return symbolFactory.newSymbol("GT", GT);  }
        case 431: break;
        case 5: 
          { return symbolFactory.newSymbol("LT", LT);  }
        case 432: break;
        case 32: 
          { return symbolFactory.newSymbol("DD", DD);  }
        case 433: break;
        case 34: 
          { return symbolFactory.newSymbol("DT", DT);  }
        case 434: break;
        case 36: 
          { return symbolFactory.newSymbol("DL", DL);  }
        case 435: break;
        case 41: 
          { return symbolFactory.newSymbol("OL", OL);  }
        case 436: break;
        case 357: 
          { return symbolFactory.newSymbol("version", version);  }
        case 437: break;
        case 356: 
          { return symbolFactory.newSymbol("ISINDEX", ISINDEX);  }
        case 438: break;
        case 353: 
          { return symbolFactory.newSymbol("LISTING", LISTING);  }
        case 439: break;
        case 351: 
          { return symbolFactory.newSymbol("MARQUEE", MARQUEE);  }
        case 440: break;
        case 348: 
          { return symbolFactory.newSymbol("NOEMBED", NOEMBED);  }
        case 441: break;
        case 347: 
          { return symbolFactory.newSymbol("BGSOUND", BGSOUND);  }
        case 442: break;
        case 344: 
          { return symbolFactory.newSymbol("ACRONYM", ACRONYM);  }
        case 443: break;
        case 343: 
          { return symbolFactory.newSymbol("ADDRESS", ADDRESS);  }
        case 444: break;
        case 341: 
          { return symbolFactory.newSymbol("CAPTION", CAPTION);  }
        case 445: break;
        case 338: 
          { return symbolFactory.newSymbol("DOCTYPE", DOCTYPE);  }
        case 446: break;
        case 370: 
          { return symbolFactory.newSymbol("BLOCKQUOTE", BLOCKQUOTE);  }
        case 447: break;
        case 113: 
          { return symbolFactory.newSymbol("DIR", DIR);  }
        case 448: break;
        case 112: 
          { return symbolFactory.newSymbol("DFN", DFN);  }
        case 449: break;
        case 111: 
          { return symbolFactory.newSymbol("DEL", DEL);  }
        case 450: break;
        case 114: 
          { return symbolFactory.newSymbol("DIV", DIV);  }
        case 451: break;
        case 118: 
          { return symbolFactory.newSymbol("COL", COL);  }
        case 452: break;
        case 129: 
          { return symbolFactory.newSymbol("PRE", PRE);  }
        case 453: break;
        case 136: 
          { return symbolFactory.newSymbol("BDO", BDO);  }
        case 454: break;
        case 142: 
          { return symbolFactory.newSymbol("BIG", BIG);  }
        case 455: break;
        case 150: 
          { return symbolFactory.newSymbol("MAP", MAP);  }
        case 456: break;
        case 161: 
          { return symbolFactory.newSymbol("SUP", SUP);  }
        case 457: break;
        case 162: 
          { return symbolFactory.newSymbol("SUB", SUB);  }
        case 458: break;
        case 173: 
          { return symbolFactory.newSymbol("INS", INS);  }
        case 459: break;
        case 174: 
          { return symbolFactory.newSymbol("IMG", IMG);  }
        case 460: break;
        case 179: 
          { return symbolFactory.newSymbol("KBD", KBD);  }
        case 461: break;
        case 181: 
          { return symbolFactory.newSymbol("VAR", VAR);  }
        case 462: break;
        case 185: 
          { return symbolFactory.newSymbol("XMP", XMP);  }
        case 463: break;
        case 186: 
          { return symbolFactory.newSymbol("WBR", WBR);  }
        case 464: break;
        case 368: 
          { return symbolFactory.newSymbol("FIELDSET", FIELDSET);  }
        case 465: break;
        case 367: 
          { return symbolFactory.newSymbol("FRAMESET", FRAMESET);  }
        case 466: break;
        case 366: 
          { return symbolFactory.newSymbol("MULTICOL", MULTICOL);  }
        case 467: break;
        case 365: 
          { return symbolFactory.newSymbol("NOFRAMES", NOFRAMES);  }
        case 468: break;
        case 364: 
          { return symbolFactory.newSymbol("NOSCRIPT", NOSCRIPT);  }
        case 469: break;
        case 362: 
          { return symbolFactory.newSymbol("BASEFONT", BASEFONT);  }
        case 470: break;
        case 361: 
          { return symbolFactory.newSymbol("TEXTAREA", TEXTAREA);  }
        case 471: break;
        case 360: 
          { return symbolFactory.newSymbol("COLGROUP", COLGROUP);  }
        case 472: break;
        case 359: 
          { return symbolFactory.newSymbol("OPTGROUP", OPTGROUP);  }
        case 473: break;
        case 295: 
          { return symbolFactory.newSymbol("INPUT", INPUT);  }
        case 474: break;
        case 291: 
          { return symbolFactory.newSymbol("LABEL", LABEL);  }
        case 475: break;
        case 290: 
          { return symbolFactory.newSymbol("LAYER", LAYER);  }
        case 476: break;
        case 288: 
          { return symbolFactory.newSymbol("SMALL", SMALL);  }
        case 477: break;
        case 282: 
          { return symbolFactory.newSymbol("STYLE", STYLE);  }
        case 478: break;
        case 273: 
          { return symbolFactory.newSymbol("BLINK", BLINK);  }
        case 479: break;
        case 267: 
          { return symbolFactory.newSymbol("EMBED", EMBED);  }
        case 480: break;
        case 266: 
          { return symbolFactory.newSymbol("PARAM", PARAM);  }
        case 481: break;
        case 261: 
          { return symbolFactory.newSymbol("TABLE", TABLE);  }
        case 482: break;
        case 262: 
          { return symbolFactory.newSymbol("TBODY", TBODY);  }
        case 483: break;
        case 263: 
          { return symbolFactory.newSymbol("TFOOT", TFOOT);  }
        case 484: break;
        case 264: 
          { return symbolFactory.newSymbol("TITLE", TITLE);  }
        case 485: break;
        case 265: 
          { return symbolFactory.newSymbol("THEAD", THEAD);  }
        case 486: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
