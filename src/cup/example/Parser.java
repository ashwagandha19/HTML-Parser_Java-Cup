
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\351\000\002\160\004\000\002\002\004\000\002\154" +
    "\003\000\002\056\013\000\002\161\004\000\002\164\003" +
    "\000\002\170\004\000\002\170\004\000\002\045\013\000" +
    "\002\172\003\000\002\172\003\000\002\172\003\000\002" +
    "\172\003\000\002\172\003\000\002\172\003\000\002\172" +
    "\003\000\002\172\003\000\002\017\013\000\002\173\003" +
    "\000\002\173\003\000\002\173\003\000\002\173\003\000" +
    "\002\173\003\000\002\173\003\000\002\173\003\000\002" +
    "\173\003\000\002\173\003\000\002\003\014\000\002\171" +
    "\003\000\002\171\003\000\002\212\003\000\002\165\004" +
    "\000\002\167\003\000\002\004\012\000\002\005\012\000" +
    "\002\006\012\000\002\174\003\000\002\174\003\000\002" +
    "\007\012\000\002\175\003\000\002\141\005\000\002\010" +
    "\012\000\002\155\005\000\002\011\012\000\002\012\012" +
    "\000\002\013\005\000\002\014\012\000\002\015\012\000" +
    "\002\211\003\000\002\176\003\000\002\176\003\000\002" +
    "\176\003\000\002\176\003\000\002\176\003\000\002\176" +
    "\003\000\002\176\003\000\002\176\003\000\002\176\003" +
    "\000\002\176\003\000\002\176\003\000\002\176\003\000" +
    "\002\176\003\000\002\176\003\000\002\176\003\000\002" +
    "\176\003\000\002\176\003\000\002\176\003\000\002\016" +
    "\011\000\002\020\005\000\002\021\012\000\002\022\012" +
    "\000\002\023\012\000\002\025\012\000\002\024\012\000" +
    "\002\026\005\000\002\177\005\000\002\222\003\000\002" +
    "\222\003\000\002\222\003\000\002\222\003\000\002\222" +
    "\003\000\002\222\003\000\002\222\003\000\002\222\003" +
    "\000\002\222\003\000\002\222\003\000\002\027\012\000" +
    "\002\030\012\000\002\031\012\000\002\033\012\000\002" +
    "\034\012\000\002\035\012\000\002\032\012\000\002\037" +
    "\012\000\002\036\005\000\002\040\013\000\002\213\003" +
    "\000\002\200\003\000\002\200\003\000\002\044\005\000" +
    "\002\041\012\000\002\202\003\000\002\202\003\000\002" +
    "\202\003\000\002\202\003\000\002\202\003\000\002\202" +
    "\003\000\002\202\003\000\002\042\012\000\002\201\003" +
    "\000\002\201\003\000\002\043\012\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\047\012\000\002\050" +
    "\012\000\002\051\012\000\002\052\012\000\002\053\012" +
    "\000\002\054\012\000\002\055\005\000\002\057\012\000" +
    "\002\062\005\000\002\060\005\000\002\156\005\000\002" +
    "\061\012\000\002\063\005\000\002\064\012\000\002\065" +
    "\012\000\002\066\005\000\002\203\003\000\002\203\003" +
    "\000\002\203\003\000\002\203\003\000\002\067\012\000" +
    "\002\070\012\000\002\071\012\000\002\072\012\000\002" +
    "\073\005\000\002\074\012\000\002\100\003\000\002\075" +
    "\012\000\002\076\012\000\002\101\005\000\002\077\012" +
    "\000\002\102\012\000\002\104\005\000\002\103\012\000" +
    "\002\105\012\000\002\106\012\000\002\107\012\000\002" +
    "\204\004\000\002\110\012\000\002\111\012\000\002\112" +
    "\012\000\002\113\012\000\002\114\012\000\002\115\005" +
    "\000\002\220\003\000\002\220\003\000\002\220\003\000" +
    "\002\220\003\000\002\220\003\000\002\220\003\000\002" +
    "\220\003\000\002\220\003\000\002\220\003\000\002\220" +
    "\003\000\002\220\003\000\002\220\003\000\002\220\003" +
    "\000\002\220\003\000\002\205\003\000\002\205\003\000" +
    "\002\205\003\000\002\205\003\000\002\116\012\000\002" +
    "\117\012\000\002\130\012\000\002\126\012\000\002\120" +
    "\012\000\002\206\003\000\002\206\003\000\002\121\012" +
    "\000\002\125\012\000\002\122\012\000\002\123\005\000" +
    "\002\124\012\000\002\131\012\000\002\127\012\000\002" +
    "\132\012\000\002\133\012\000\002\134\012\000\002\221" +
    "\003\000\002\221\003\000\002\207\003\000\002\207\003" +
    "\000\002\207\003\000\002\207\003\000\002\136\005\000" +
    "\002\142\005\000\002\144\005\000\002\135\014\000\002" +
    "\137\012\000\002\210\003\000\002\210\003\000\002\210" +
    "\003\000\002\210\003\000\002\210\003\000\002\210\003" +
    "\000\002\210\003\000\002\210\003\000\002\210\003\000" +
    "\002\210\003\000\002\210\003\000\002\210\003\000\002" +
    "\210\003\000\002\210\003\000\002\210\003\000\002\140" +
    "\012\000\002\143\012\000\002\145\012\000\002\146\012" +
    "\000\002\147\012\000\002\150\012\000\002\151\012\000" +
    "\002\152\005\000\002\157\012\000\002\153\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02f8\000\004\163\004\001\002\000\004\157\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\060\012\001\002\000\004\002\001\001\002\000" +
    "\004\002\uffff\001\002\000\004\161\013\001\002\000\002" +
    "\001\002\000\004\156\017\001\002\000\002\001\002\000" +
    "\004\156\ufffd\001\002\000\004\157\020\001\002\000\004" +
    "\050\u02cd\001\002\000\004\157\027\001\002\000\004\157" +
    "\023\001\002\000\004\160\024\001\002\000\004\060\025" +
    "\001\002\000\004\156\026\001\002\000\004\002\ufffe\001" +
    "\002\000\006\022\032\047\033\001\002\000\004\157\ufffb" +
    "\001\002\000\004\157\ufffa\001\002\000\002\001\002\000" +
    "\004\156\034\001\002\000\004\157\035\001\002\000\006" +
    "\046\046\110\045\001\002\000\004\157\uff94\001\002\000" +
    "\004\157\uff93\001\002\000\004\157\041\001\002\000\004" +
    "\160\042\001\002\000\004\047\043\001\002\000\004\156" +
    "\044\001\002\000\004\157\uff92\001\002\000\004\156\050" +
    "\001\002\000\004\156\047\001\002\000\004\157\uff9e\001" +
    "\002\000\004\157\071\001\002\000\004\157\uffcc\001\002" +
    "\000\004\157\uffce\001\002\000\004\157\uffc5\001\002\000" +
    "\004\157\uff91\001\002\000\004\157\uffc9\001\002\000\004" +
    "\157\uffd1\001\002\000\004\157\uffc3\001\002\000\004\157" +
    "\uffcf\001\002\000\004\157\uffc1\001\002\000\004\157\uffec" +
    "\001\002\000\004\157\uffea\001\002\000\004\157\uffcd\001" +
    "\002\000\004\157\u02c2\001\002\000\004\157\uff8e\001\002" +
    "\000\004\157\uffc2\001\002\000\004\157\uffee\001\002\000" +
    "\100\007\151\014\126\016\152\021\122\025\153\033\141" +
    "\035\147\036\145\037\143\045\134\051\140\052\137\053" +
    "\135\054\133\055\132\056\130\057\150\066\117\067\123" +
    "\073\144\077\142\101\115\102\131\104\121\106\116\113" +
    "\124\116\125\120\146\137\136\152\127\155\120\001\002" +
    "\000\004\157\uffc7\001\002\000\004\157\uffe9\001\002\000" +
    "\004\157\uffef\001\002\000\004\157\uffd0\001\002\000\004" +
    "\157\uff8f\001\002\000\004\157\uffc4\001\002\000\004\157" +
    "\uffed\001\002\000\004\157\uffeb\001\002\000\004\157\uffc0" +
    "\001\002\000\004\157\uffe8\001\002\000\004\157\uffc6\001" +
    "\002\000\004\157\uffc8\001\002\000\004\157\uff8c\001\002" +
    "\000\004\157\uffbf\001\002\000\004\157\uffe7\001\002\000" +
    "\004\157\uff90\001\002\000\004\157\uffca\001\002\000\004" +
    "\157\uffcb\001\002\000\004\157\uff8d\001\002\000\004\156" +
    "\u02bc\001\002\000\004\156\u02b6\001\002\000\004\156\u02b0" +
    "\001\002\000\004\156\u02aa\001\002\000\004\156\u02a4\001" +
    "\002\000\004\156\u029f\001\002\000\004\156\u029e\001\002" +
    "\000\004\156\u0298\001\002\000\004\156\u0292\001\002\000" +
    "\004\156\u028c\001\002\000\004\156\u0286\001\002\000\004" +
    "\156\u0280\001\002\000\004\156\u027a\001\002\000\004\156" +
    "\u0274\001\002\000\004\156\u026e\001\002\000\004\156\u0220" +
    "\001\002\000\004\156\u021a\001\002\000\004\156\u01d9\001" +
    "\002\000\004\156\u01d3\001\002\000\004\156\u01cd\001\002" +
    "\000\004\156\u01c7\001\002\000\004\156\u01c1\001\002\000" +
    "\004\156\u01bb\001\002\000\004\156\u01b5\001\002\000\004" +
    "\156\u01af\001\002\000\004\156\u01a4\001\002\000\004\156" +
    "\u0192\001\002\000\004\156\u0191\001\002\000\004\156\163" +
    "\001\002\000\004\156\162\001\002\000\004\156\154\001" +
    "\002\000\004\157\071\001\002\000\004\157\156\001\002" +
    "\000\004\160\157\001\002\000\004\025\160\001\002\000" +
    "\004\156\161\001\002\000\004\157\uffbb\001\002\000\004" +
    "\157\uffd4\001\002\000\004\157\205\001\002\000\004\157" +
    "\uff5f\001\002\000\004\157\uffb5\001\002\000\004\157\uff57" +
    "\001\002\000\004\157\uff5d\001\002\000\004\157\uffb3\001" +
    "\002\000\004\157\uff5a\001\002\000\004\157\uff2a\001\002" +
    "\000\004\157\uff29\001\002\000\004\157\uffb0\001\002\000" +
    "\004\157\uff5b\001\002\000\004\157\uff2e\001\002\000\004" +
    "\157\uffdd\001\002\000\004\157\uff2d\001\002\000\004\157" +
    "\uff31\001\002\000\004\157\uff2b\001\002\000\004\157\uff5e" +
    "\001\002\000\004\157\uffaf\001\002\000\114\004\256\005" +
    "\267\006\301\010\254\012\255\015\257\017\275\020\261" +
    "\023\266\026\305\027\262\034\263\041\270\042\302\044" +
    "\253\061\252\062\276\063\304\064\271\070\245\107\300" +
    "\111\244\112\260\116\125\121\250\122\247\127\273\130" +
    "\264\131\274\132\303\133\251\135\306\136\277\150\272" +
    "\151\246\153\265\154\307\001\002\000\004\157\uff59\001" +
    "\002\000\004\157\uff30\001\002\000\004\157\240\001\002" +
    "\000\004\157\uff24\001\002\000\004\157\uff28\001\002\000" +
    "\004\157\uff27\001\002\000\004\157\uff2c\001\002\000\004" +
    "\157\uff25\001\002\000\004\157\uffdc\001\002\000\004\157" +
    "\uffb1\001\002\000\004\157\uffe3\001\002\000\004\157\uff55" +
    "\001\002\000\004\157\uff23\001\002\000\004\157\uff58\001" +
    "\002\000\004\157\uff5c\001\002\000\004\157\uff52\001\002" +
    "\000\004\157\uffb2\001\002\000\004\157\uff54\001\002\000" +
    "\004\157\uff2f\001\002\000\004\157\uff26\001\002\000\004" +
    "\157\uffae\001\002\000\004\157\uffad\001\002\000\004\157" +
    "\uff56\001\002\000\004\157\uffb4\001\002\000\004\157\uff53" +
    "\001\002\000\004\157\uffac\001\002\000\004\160\241\001" +
    "\002\000\004\007\242\001\002\000\004\156\243\001\002" +
    "\000\004\157\uffde\001\002\000\004\156\u018b\001\002\000" +
    "\004\156\u0185\001\002\000\004\156\u017f\001\002\000\004" +
    "\156\u0179\001\002\000\004\156\u0173\001\002\000\004\156" +
    "\u016d\001\002\000\004\156\u0167\001\002\000\004\156\u0161" +
    "\001\002\000\004\156\u015a\001\002\000\004\156\u0154\001" +
    "\002\000\004\156\u0146\001\002\000\004\156\u0140\001\002" +
    "\000\004\156\u0135\001\002\000\004\156\u012f\001\002\000" +
    "\004\156\u0129\001\002\000\004\156\u0123\001\002\000\004" +
    "\156\u0122\001\002\000\004\156\u0121\001\002\000\004\156" +
    "\u0120\001\002\000\004\156\u011a\001\002\000\004\156\u0114" +
    "\001\002\000\004\156\u0113\001\002\000\004\156\u010d\001" +
    "\002\000\004\156\u0107\001\002\000\004\156\u0101\001\002" +
    "\000\004\156\373\001\002\000\004\156\372\001\002\000" +
    "\004\156\364\001\002\000\004\156\356\001\002\000\004" +
    "\156\350\001\002\000\004\156\347\001\002\000\004\156" +
    "\341\001\002\000\004\156\333\001\002\000\004\156\325" +
    "\001\002\000\004\156\317\001\002\000\004\156\310\001" +
    "\002\000\004\157\311\001\002\000\112\004\256\005\267" +
    "\006\301\010\254\012\255\015\257\017\275\020\261\023" +
    "\266\026\305\027\262\034\263\041\270\042\302\044\253" +
    "\061\252\062\276\063\304\064\271\070\245\107\300\111" +
    "\244\112\260\121\250\122\247\127\273\130\264\131\274" +
    "\132\303\133\251\135\306\136\277\150\272\151\246\153" +
    "\265\154\307\001\002\000\004\157\313\001\002\000\004" +
    "\160\314\001\002\000\004\154\315\001\002\000\004\156" +
    "\316\001\002\000\004\157\uff1a\001\002\000\004\157\311" +
    "\001\002\000\004\157\321\001\002\000\004\160\322\001" +
    "\002\000\004\135\323\001\002\000\004\156\324\001\002" +
    "\000\004\157\uff3e\001\002\000\004\157\311\001\002\000" +
    "\004\157\327\001\002\000\004\160\330\001\002\000\004" +
    "\026\331\001\002\000\004\156\332\001\002\000\004\157" +
    "\uffba\001\002\000\004\157\071\001\002\000\004\157\335" +
    "\001\002\000\004\160\336\001\002\000\004\063\337\001" +
    "\002\000\004\156\340\001\002\000\004\157\uff80\001\002" +
    "\000\004\157\311\001\002\000\004\157\343\001\002\000" +
    "\004\160\344\001\002\000\004\132\345\001\002\000\004" +
    "\156\346\001\002\000\004\157\uff41\001\002\000\004\157" +
    "\uffa3\001\002\000\004\157\311\001\002\000\004\157\352" +
    "\001\002\000\004\160\353\001\002\000\004\006\354\001" +
    "\002\000\004\156\355\001\002\000\004\157\uffdf\001\002" +
    "\000\004\157\311\001\002\000\004\157\360\001\002\000" +
    "\004\160\361\001\002\000\004\107\362\001\002\000\004" +
    "\156\363\001\002\000\004\157\uff69\001\002\000\004\157" +
    "\311\001\002\000\004\157\366\001\002\000\004\160\367" +
    "\001\002\000\004\136\370\001\002\000\004\156\371\001" +
    "\002\000\004\157\uff3d\001\002\000\004\157\uff82\001\002" +
    "\000\004\157\311\001\002\000\004\157\375\001\002\000" +
    "\004\160\376\001\002\000\004\017\377\001\002\000\004" +
    "\156\u0100\001\002\000\004\157\uffd3\001\002\000\004\157" +
    "\311\001\002\000\004\157\u0103\001\002\000\004\160\u0104" +
    "\001\002\000\004\131\u0105\001\002\000\004\156\u0106\001" +
    "\002\000\004\157\uff42\001\002\000\004\157\311\001\002" +
    "\000\004\157\u0109\001\002\000\004\160\u010a\001\002\000" +
    "\004\127\u010b\001\002\000\004\156\u010c\001\002\000\004" +
    "\157\uff44\001\002\000\004\157\311\001\002\000\004\157" +
    "\u010f\001\002\000\004\160\u0110\001\002\000\004\150\u0111" +
    "\001\002\000\004\156\u0112\001\002\000\004\157\uff1e\001" +
    "\002\000\004\157\uff83\001\002\000\004\157\311\001\002" +
    "\000\004\157\u0116\001\002\000\004\160\u0117\001\002\000" +
    "\004\041\u0118\001\002\000\004\156\u0119\001\002\000\004" +
    "\157\uffa4\001\002\000\004\157\311\001\002\000\004\157" +
    "\u011c\001\002\000\004\160\u011d\001\002\000\004\005\u011e" +
    "\001\002\000\004\156\u011f\001\002\000\004\157\uffe0\001" +
    "\002\000\004\157\uffbd\001\002\000\004\157\uff1b\001\002" +
    "\000\004\157\uff43\001\002\000\004\157\311\001\002\000" +
    "\004\157\u0125\001\002\000\004\160\u0126\001\002\000\004" +
    "\034\u0127\001\002\000\004\156\u0128\001\002\000\004\157" +
    "\uffa9\001\002\000\004\157\311\001\002\000\004\157\u012b" +
    "\001\002\000\004\160\u012c\001\002\000\004\027\u012d\001" +
    "\002\000\004\156\u012e\001\002\000\004\157\uffb9\001\002" +
    "\000\004\157\311\001\002\000\004\157\u0131\001\002\000" +
    "\004\160\u0132\001\002\000\004\020\u0133\001\002\000\004" +
    "\156\u0134\001\002\000\004\157\uffd2\001\002\000\004\157" +
    "\u0136\001\002\000\004\117\u013e\001\002\000\004\157\071" +
    "\001\002\000\004\157\u0139\001\002\000\004\160\u013a\001" +
    "\002\000\004\112\u013b\001\002\000\004\156\u013c\001\002" +
    "\000\004\157\uff65\001\002\000\004\157\uff66\001\002\000" +
    "\004\156\u013f\001\002\000\004\157\uff60\001\002\000\004" +
    "\157\311\001\002\000\004\157\u0142\001\002\000\004\160" +
    "\u0143\001\002\000\004\015\u0144\001\002\000\004\156\u0145" +
    "\001\002\000\004\157\uffd5\001\002\000\002\001\002\000" +
    "\002\001\002\000\002\001\002\000\004\156\u014a\001\002" +
    "\000\004\157\u014c\001\002\000\004\157\uffe5\001\002\000" +
    "\126\004\256\005\267\006\301\010\254\012\255\015\257" +
    "\017\275\020\261\023\266\026\305\027\262\034\263\041" +
    "\270\042\302\044\253\051\140\052\137\053\135\054\133" +
    "\055\132\056\130\061\252\062\276\063\304\064\271\070" +
    "\245\107\300\111\244\112\260\121\250\122\247\127\273" +
    "\130\264\131\274\132\303\133\251\135\306\136\277\150" +
    "\272\151\246\153\265\154\307\001\002\000\004\157\uffe4" +
    "\001\002\000\004\157\u014f\001\002\000\004\160\u0150\001" +
    "\002\000\004\004\u0151\001\002\000\004\156\u0152\001\002" +
    "\000\004\157\uffe6\001\002\000\004\156\uffe2\001\002\000" +
    "\004\157\311\001\002\000\004\157\u0156\001\002\000\004" +
    "\160\u0157\001\002\000\004\012\u0158\001\002\000\004\156" +
    "\u0159\001\002\000\004\157\uffd8\001\002\000\004\157\071" +
    "\001\002\000\004\157\uffda\001\002\000\004\157\u015d\001" +
    "\002\000\004\160\u015e\001\002\000\004\010\u015f\001\002" +
    "\000\004\156\u0160\001\002\000\004\157\uffdb\001\002\000" +
    "\002\001\002\000\004\157\u0163\001\002\000\004\160\u0164" +
    "\001\002\000\004\044\u0165\001\002\000\004\156\u0166\001" +
    "\002\000\004\157\uff9d\001\002\000\004\157\311\001\002" +
    "\000\004\157\u0169\001\002\000\004\160\u016a\001\002\000" +
    "\004\061\u016b\001\002\000\004\156\u016c\001\002\000\004" +
    "\157\uff84\001\002\000\004\157\311\001\002\000\004\157" +
    "\u016f\001\002\000\004\160\u0170\001\002\000\004\133\u0171" +
    "\001\002\000\004\156\u0172\001\002\000\004\157\uff40\001" +
    "\002\000\004\157\311\001\002\000\004\157\u0175\001\002" +
    "\000\004\160\u0176\001\002\000\004\121\u0177\001\002\000" +
    "\004\156\u0178\001\002\000\004\157\uff4c\001\002\000\004" +
    "\157\311\001\002\000\004\157\u017b\001\002\000\004\160" +
    "\u017c\001\002\000\004\122\u017d\001\002\000\004\156\u017e" +
    "\001\002\000\004\157\uff4b\001\002\000\004\157\311\001" +
    "\002\000\004\157\u0181\001\002\000\004\160\u0182\001\002" +
    "\000\004\151\u0183\001\002\000\004\156\u0184\001\002\000" +
    "\004\157\uff1d\001\002\000\004\157\311\001\002\000\004" +
    "\157\u0187\001\002\000\004\160\u0188\001\002\000\004\070" +
    "\u0189\001\002\000\004\156\u018a\001\002\000\004\157\uff7d" +
    "\001\002\000\004\157\311\001\002\000\004\157\u018d\001" +
    "\002\000\004\160\u018e\001\002\000\004\111\u018f\001\002" +
    "\000\004\156\u0190\001\002\000\004\157\uff67\001\002\000" +
    "\004\157\uff85\001\002\000\004\157\u0193\001\002\000\004" +
    "\075\u0199\001\002\000\004\157\u0195\001\002\000\004\160" +
    "\u0196\001\002\000\004\035\u0197\001\002\000\004\156\u0198" +
    "\001\002\000\004\157\uffa8\001\002\000\004\156\u019a\001" +
    "\002\000\004\157\u019c\001\002\000\004\157\uffa0\001\002" +
    "\000\156\004\256\005\267\006\301\010\254\012\255\014" +
    "\126\015\257\017\275\020\261\021\122\023\266\025\153" +
    "\026\305\027\262\034\263\035\147\036\145\037\143\041" +
    "\270\042\302\044\253\045\134\061\252\062\276\063\304" +
    "\064\271\067\123\070\245\077\142\102\131\104\121\106" +
    "\116\107\300\111\244\112\260\113\124\116\125\120\146" +
    "\121\250\122\247\127\273\130\264\131\274\132\303\133" +
    "\251\135\306\136\277\137\136\150\272\151\246\152\127" +
    "\153\265\154\307\155\120\001\002\000\004\157\uffa1\001" +
    "\002\000\004\157\uff9f\001\002\000\004\157\u01a0\001\002" +
    "\000\004\160\u01a1\001\002\000\004\075\u01a2\001\002\000" +
    "\004\156\u01a3\001\002\000\004\157\uff74\001\002\000\004" +
    "\157\u01a7\001\002\000\004\157\uff50\001\002\000\004\157" +
    "\uff4f\001\002\000\010\004\256\023\266\057\150\001\002" +
    "\000\004\157\u01ab\001\002\000\004\157\uff51\001\002\000" +
    "\004\157\uff4e\001\002\000\004\160\u01ac\001\002\000\004" +
    "\120\u01ad\001\002\000\004\156\u01ae\001\002\000\004\157" +
    "\uff4d\001\002\000\004\157\071\001\002\000\004\157\u01b1" +
    "\001\002\000\004\160\u01b2\001\002\000\004\036\u01b3\001" +
    "\002\000\004\156\u01b4\001\002\000\004\157\uffa7\001\002" +
    "\000\004\157\071\001\002\000\004\157\u01b7\001\002\000" +
    "\004\160\u01b8\001\002\000\004\073\u01b9\001\002\000\004" +
    "\156\u01ba\001\002\000\004\157\uff76\001\002\000\002\001" +
    "\002\000\004\157\u01bd\001\002\000\004\160\u01be\001\002" +
    "\000\004\037\u01bf\001\002\000\004\156\u01c0\001\002\000" +
    "\004\157\uffa6\001\002\000\002\001\002\000\004\157\u01c3" +
    "\001\002\000\004\160\u01c4\001\002\000\004\077\u01c5\001" +
    "\002\000\004\156\u01c6\001\002\000\004\157\uff72\001\002" +
    "\000\004\157\u019c\001\002\000\004\157\u01c9\001\002\000" +
    "\004\160\u01ca\001\002\000\004\033\u01cb\001\002\000\004" +
    "\156\u01cc\001\002\000\004\157\uffaa\001\002\000\004\157" +
    "\311\001\002\000\004\157\u01cf\001\002\000\004\160\u01d0" +
    "\001\002\000\004\051\u01d1\001\002\000\004\156\u01d2\001" +
    "\002\000\004\157\uff8b\001\002\000\004\157\311\001\002" +
    "\000\004\157\u01d5\001\002\000\004\160\u01d6\001\002\000" +
    "\004\052\u01d7\001\002\000\004\156\u01d8\001\002\000\004" +
    "\157\uff8a\001\002\000\004\157\u01da\001\002\000\004\024" +
    "\u0213\001\002\000\004\157\u01dc\001\002\000\004\031\u0206" +
    "\001\002\000\004\157\u01df\001\002\000\004\157\uff38\001" +
    "\002\000\012\140\u01e8\143\u01e9\145\u01ea\147\u01eb\001\002" +
    "\000\004\157\uff3a\001\002\000\004\157\uff39\001\002\000" +
    "\004\157\uff37\001\002\000\004\157\u01e4\001\002\000\004" +
    "\160\u01e5\001\002\000\004\137\u01e6\001\002\000\004\156" +
    "\u01e7\001\002\000\004\157\uff33\001\002\000\004\156\u0205" +
    "\001\002\000\004\156\u0204\001\002\000\004\156\u0203\001" +
    "\002\000\004\156\u01ec\001\002\000\004\157\u01ed\001\002" +
    "\000\006\141\u01f5\144\u01f6\001\002\000\004\157\uff3c\001" +
    "\002\000\004\157\uff3b\001\002\000\004\157\u01f1\001\002" +
    "\000\004\160\u01f2\001\002\000\004\147\u01f3\001\002\000" +
    "\004\156\u01f4\001\002\000\004\157\uff1f\001\002\000\004" +
    "\156\u01fd\001\002\000\004\156\u01f7\001\002\000\004\157" +
    "\071\001\002\000\004\157\u01f9\001\002\000\004\160\u01fa" +
    "\001\002\000\004\144\u01fb\001\002\000\004\156\u01fc\001" +
    "\002\000\004\157\uff21\001\002\000\004\157\071\001\002" +
    "\000\004\157\u01ff\001\002\000\004\160\u0200\001\002\000" +
    "\004\141\u0201\001\002\000\004\156\u0202\001\002\000\004" +
    "\157\uff32\001\002\000\004\157\uff34\001\002\000\004\157" +
    "\uff35\001\002\000\004\157\uff36\001\002\000\004\156\u0207" +
    "\001\002\000\004\157\u0208\001\002\000\004\157\u020e\001" +
    "\002\000\004\157\u020a\001\002\000\004\160\u020b\001\002" +
    "\000\004\031\u020c\001\002\000\004\156\u020d\001\002\000" +
    "\004\157\uffb8\001\002\000\004\030\u0211\001\002\000\004" +
    "\156\u0210\001\002\000\004\157\uffb6\001\002\000\004\156" +
    "\u0212\001\002\000\004\156\uffb7\001\002\000\004\156\u0214" +
    "\001\002\000\004\157\071\001\002\000\004\157\u0216\001" +
    "\002\000\004\160\u0217\001\002\000\004\024\u0218\001\002" +
    "\000\004\156\u0219\001\002\000\004\157\uffbc\001\002\000" +
    "\004\157\311\001\002\000\004\157\u021c\001\002\000\004" +
    "\160\u021d\001\002\000\004\053\u021e\001\002\000\004\156" +
    "\u021f\001\002\000\004\157\uff89\001\002\000\004\157\u0227" +
    "\001\002\000\004\157\uff9c\001\002\000\004\157\uff99\001" +
    "\002\000\004\157\u026a\001\002\000\004\157\uff98\001\002" +
    "\000\004\157\uff96\001\002\000\004\157\uff9a\001\002\000" +
    "\114\007\151\014\126\016\152\021\122\025\153\033\141" +
    "\035\147\036\145\037\143\043\u022c\045\134\051\140\052" +
    "\137\053\135\054\133\055\132\056\130\057\150\065\u022b" +
    "\066\117\067\123\071\u022e\072\u022f\073\144\077\142\101" +
    "\115\102\131\104\121\106\116\113\124\116\125\120\146" +
    "\124\u022d\137\136\142\u022a\152\127\155\120\001\002\000" +
    "\004\157\uff97\001\002\000\004\157\uff9b\001\002\000\004" +
    "\156\u0264\001\002\000\004\156\u0263\001\002\000\004\156" +
    "\u0254\001\002\000\004\156\u023c\001\002\000\004\156\u023b" +
    "\001\002\000\004\156\u0230\001\002\000\004\157\u0234\001" +
    "\002\000\004\157\uff7b\001\002\000\004\157\uff78\001\002" +
    "\000\004\157\uff7a\001\002\000\106\007\151\014\126\016" +
    "\152\021\122\025\153\033\141\035\147\036\145\037\143" +
    "\045\134\051\140\052\137\053\135\054\133\055\132\056" +
    "\130\057\150\065\u022b\066\117\067\123\073\144\077\142" +
    "\101\115\102\131\104\121\106\116\113\124\116\125\120" +
    "\146\124\u022d\137\136\142\u022a\152\127\155\120\001\002" +
    "\000\004\157\u0237\001\002\000\004\157\uff79\001\002\000" +
    "\004\160\u0238\001\002\000\004\072\u0239\001\002\000\004" +
    "\156\u023a\001\002\000\004\157\uff77\001\002\000\004\157" +
    "\uff7c\001\002\000\004\157\u023e\001\002\000\004\157\uff48" +
    "\001\002\000\006\114\u0245\115\u0246\001\002\000\004\157" +
    "\u0241\001\002\000\004\157\uff47\001\002\000\004\160\u0242" +
    "\001\002\000\004\124\u0243\001\002\000\004\156\u0244\001" +
    "\002\000\004\157\uff46\001\002\000\004\156\u024d\001\002" +
    "\000\004\156\u0247\001\002\000\002\001\002\000\004\157" +
    "\u0249\001\002\000\004\160\u024a\001\002\000\004\115\u024b" +
    "\001\002\000\004\156\u024c\001\002\000\004\157\uff62\001" +
    "\002\000\004\157\u024e\001\002\000\004\115\u0246\001\002" +
    "\000\004\157\u0250\001\002\000\004\160\u0251\001\002\000" +
    "\004\114\u0252\001\002\000\004\156\u0253\001\002\000\004" +
    "\157\uff63\001\002\000\004\157\u0255\001\002\000\004\074" +
    "\u025c\001\002\000\004\157\u0227\001\002\000\004\157\u0258" +
    "\001\002\000\004\160\u0259\001\002\000\004\043\u025a\001" +
    "\002\000\004\156\u025b\001\002\000\004\157\uffa2\001\002" +
    "\000\004\156\u025d\001\002\000\004\157\311\001\002\000" +
    "\004\157\u025f\001\002\000\004\160\u0260\001\002\000\004" +
    "\074\u0261\001\002\000\004\156\u0262\001\002\000\004\157" +
    "\uff75\001\002\000\004\157\uff7f\001\002\000\002\001\002" +
    "\000\004\157\u0266\001\002\000\004\160\u0267\001\002\000" +
    "\004\142\u0268\001\002\000\004\156\u0269\001\002\000\004" +
    "\157\uff22\001\002\000\004\160\u026b\001\002\000\004\045" +
    "\u026c\001\002\000\004\156\u026d\001\002\000\004\157\uff95" +
    "\001\002\000\004\157\311\001\002\000\004\157\u0270\001" +
    "\002\000\004\160\u0271\001\002\000\004\054\u0272\001\002" +
    "\000\004\156\u0273\001\002\000\004\157\uff88\001\002\000" +
    "\004\157\311\001\002\000\004\157\u0276\001\002\000\004" +
    "\160\u0277\001\002\000\004\055\u0278\001\002\000\004\156" +
    "\u0279\001\002\000\004\157\uff87\001\002\000\004\157\u0193" +
    "\001\002\000\004\157\u027c\001\002\000\004\160\u027d\001" +
    "\002\000\004\102\u027e\001\002\000\004\156\u027f\001\002" +
    "\000\004\157\uff6d\001\002\000\004\157\311\001\002\000" +
    "\004\157\u0282\001\002\000\004\160\u0283\001\002\000\004" +
    "\056\u0284\001\002\000\004\156\u0285\001\002\000\004\157" +
    "\uff86\001\002\000\004\157\u0193\001\002\000\004\157\u0288" +
    "\001\002\000\004\160\u0289\001\002\000\004\152\u028a\001" +
    "\002\000\004\156\u028b\001\002\000\004\157\uff1c\001\002" +
    "\000\004\157\071\001\002\000\004\157\u028e\001\002\000" +
    "\004\160\u028f\001\002\000\004\014\u0290\001\002\000\004" +
    "\156\u0291\001\002\000\004\157\uffd6\001\002\000\004\157" +
    "\311\001\002\000\004\157\u0294\001\002\000\004\160\u0295" +
    "\001\002\000\004\116\u0296\001\002\000\004\156\u0297\001" +
    "\002\000\004\157\uff61\001\002\000\004\157\u0193\001\002" +
    "\000\004\157\u029a\001\002\000\004\160\u029b\001\002\000" +
    "\004\113\u029c\001\002\000\004\156\u029d\001\002\000\004" +
    "\157\uff64\001\002\000\004\157\uff81\001\002\000\004\157" +
    "\071\001\002\000\004\157\u02a1\001\002\000\004\160\u02a2" +
    "\001\002\000\004\021\u02a3\001\002\000\004\157\uffbe\001" +
    "\002\000\004\157\071\001\002\000\004\157\u02a6\001\002" +
    "\000\004\160\u02a7\001\002\000\004\104\u02a8\001\002\000" +
    "\004\156\u02a9\001\002\000\004\157\uff6c\001\002\000\002" +
    "\001\002\000\004\157\u02ac\001\002\000\004\160\u02ad\001" +
    "\002\000\004\155\u02ae\001\002\000\004\156\u02af\001\002" +
    "\000\004\157\uff19\001\002\000\004\157\u019c\001\002\000" +
    "\004\157\u02b2\001\002\000\004\160\u02b3\001\002\000\004" +
    "\066\u02b4\001\002\000\004\156\u02b5\001\002\000\004\157" +
    "\uff7e\001\002\000\004\157\311\001\002\000\004\157\u02b8" +
    "\001\002\000\004\160\u02b9\001\002\000\004\106\u02ba\001" +
    "\002\000\004\156\u02bb\001\002\000\004\157\uff6a\001\002" +
    "\000\002\001\002\000\004\157\u02be\001\002\000\004\160" +
    "\u02bf\001\002\000\004\101\u02c0\001\002\000\004\156\u02c1" +
    "\001\002\000\004\157\uff6f\001\002\000\004\160\u02c3\001" +
    "\002\000\004\110\u02c4\001\002\000\004\156\u02c5\001\002" +
    "\000\004\157\uff68\001\002\000\004\156\u02c7\001\002\000" +
    "\004\157\071\001\002\000\004\157\u02c9\001\002\000\004" +
    "\160\u02ca\001\002\000\004\022\u02cb\001\002\000\004\156" +
    "\u02cc\001\002\000\004\157\ufff0\001\002\000\002\001\002" +
    "\000\004\156\u02cf\001\002\000\004\157\u02d7\001\002\000" +
    "\004\157\ufff1\001\002\000\004\157\ufff3\001\002\000\004" +
    "\157\ufff6\001\002\000\004\157\u02f7\001\002\000\004\157" +
    "\ufff5\001\002\000\004\157\ufff7\001\002\000\004\157\ufff8" +
    "\001\002\000\022\013\u02dc\067\123\076\u02da\103\u02dd\105" +
    "\u02de\126\u02db\134\u02df\146\u02e0\001\002\000\004\157\ufff4" +
    "\001\002\000\004\157\ufff2\001\002\000\004\156\u02f6\001" +
    "\002\000\004\156\u02f0\001\002\000\004\156\u02ef\001\002" +
    "\000\004\156\u02ee\001\002\000\004\156\u02ed\001\002\000" +
    "\004\156\u02e7\001\002\000\004\156\u02e1\001\002\000\002" +
    "\001\002\000\004\157\u02e3\001\002\000\004\160\u02e4\001" +
    "\002\000\004\146\u02e5\001\002\000\004\156\u02e6\001\002" +
    "\000\004\157\uff20\001\002\000\002\001\002\000\004\157" +
    "\u02e9\001\002\000\004\160\u02ea\001\002\000\004\134\u02eb" +
    "\001\002\000\004\156\u02ec\001\002\000\004\157\uff3f\001" +
    "\002\000\004\157\uff6b\001\002\000\004\157\uff6e\001\002" +
    "\000\004\157\uffd7\001\002\000\002\001\002\000\004\157" +
    "\u02f2\001\002\000\004\160\u02f3\001\002\000\004\126\u02f4" +
    "\001\002\000\004\156\u02f5\001\002\000\004\157\uff49\001" +
    "\002\000\004\157\uff73\001\002\000\004\160\u02f8\001\002" +
    "\000\004\050\u02f9\001\002\000\004\156\u02fa\001\002\000" +
    "\004\157\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02f8\000\004\160\004\001\001\000\006\056\010\154" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\161" +
    "\013\164\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\163\015\001\001\000\002\001\001\000\006\045" +
    "\020\170\021\001\001\000\002\001\001\000\006\017\027" +
    "\043\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\225" +
    "\u02c5\001\001\000\002\001\001\000\010\044\035\106\036" +
    "\201\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\110\006\077" +
    "\011\057\013\073\016\051\022\063\030\100\033\050\034" +
    "\112\035\111\042\054\046\062\047\053\050\110\051\075" +
    "\052\065\053\113\054\105\055\067\064\072\070\102\074" +
    "\104\076\107\077\071\102\103\103\052\111\076\114\056" +
    "\116\066\135\060\151\101\153\106\156\074\173\064\176" +
    "\055\211\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\110\006\077\011\057\013\073\016\051\022\063\030" +
    "\100\033\050\034\112\035\111\042\054\046\062\047\053" +
    "\050\110\051\075\052\065\053\113\054\105\055\067\064" +
    "\072\070\102\074\104\076\107\077\071\102\103\103\052" +
    "\111\076\114\056\116\066\135\060\151\101\153\106\156" +
    "\074\173\154\176\055\211\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\130\003\201\004\164" +
    "\005\234\007\171\010\163\012\202\014\166\015\223\020" +
    "\200\023\167\025\225\031\216\036\206\037\173\041\174" +
    "\057\170\060\227\061\211\062\175\065\203\105\212\107" +
    "\230\110\214\114\176\117\231\122\222\123\177\124\165" +
    "\127\232\130\205\131\233\133\220\134\226\147\235\150" +
    "\224\152\213\157\236\174\207\210\217\212\215\217\210" +
    "\220\221\222\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\124\003\201\004\164\005\234\007" +
    "\171\010\163\012\202\014\166\015\223\020\200\023\167" +
    "\025\225\031\216\036\206\037\173\041\174\057\170\060" +
    "\227\061\211\062\175\065\203\105\212\107\230\110\214" +
    "\117\231\122\222\123\177\124\165\127\232\130\205\131" +
    "\233\133\220\134\226\147\235\150\224\152\213\157\236" +
    "\210\217\212\311\217\210\220\221\222\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\124\003" +
    "\201\004\164\005\234\007\171\010\163\012\202\014\166" +
    "\015\223\020\200\023\167\025\225\031\216\036\206\037" +
    "\173\041\174\057\170\060\227\061\211\062\175\065\203" +
    "\105\212\107\230\110\214\117\231\122\222\123\177\124" +
    "\165\127\232\130\205\131\233\133\220\134\226\147\235" +
    "\150\224\152\213\157\236\210\217\212\317\217\210\220" +
    "\221\222\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\124\003\201\004\164\005\234\007\171\010\163\012\202" +
    "\014\166\015\223\020\200\023\167\025\225\031\216\036" +
    "\206\037\173\041\174\057\170\060\227\061\211\062\175" +
    "\065\203\105\212\107\230\110\214\117\231\122\222\123" +
    "\177\124\165\127\232\130\205\131\233\133\220\134\226" +
    "\147\235\150\224\152\213\157\236\210\217\212\325\217" +
    "\210\220\221\222\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\110\006\077\011\057\013\073\016\051\022\063" +
    "\030\100\033\050\034\112\035\111\042\054\046\062\047" +
    "\053\050\110\051\075\052\065\053\113\054\105\055\067" +
    "\064\072\070\102\074\104\076\107\077\071\102\103\103" +
    "\052\111\076\114\056\116\066\135\060\151\101\153\106" +
    "\156\074\173\333\176\055\211\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\124\003\201\004\164\005\234\007" +
    "\171\010\163\012\202\014\166\015\223\020\200\023\167" +
    "\025\225\031\216\036\206\037\173\041\174\057\170\060" +
    "\227\061\211\062\175\065\203\105\212\107\230\110\214" +
    "\117\231\122\222\123\177\124\165\127\232\130\205\131" +
    "\233\133\220\134\226\147\235\150\224\152\213\157\236" +
    "\210\217\212\341\217\210\220\221\222\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\124\003" +
    "\201\004\164\005\234\007\171\010\163\012\202\014\166" +
    "\015\223\020\200\023\167\025\225\031\216\036\206\037" +
    "\173\041\174\057\170\060\227\061\211\062\175\065\203" +
    "\105\212\107\230\110\214\117\231\122\222\123\177\124" +
    "\165\127\232\130\205\131\233\133\220\134\226\147\235" +
    "\150\224\152\213\157\236\210\217\212\350\217\210\220" +
    "\221\222\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\124\003\201\004\164\005\234\007\171\010\163\012\202" +
    "\014\166\015\223\020\200\023\167\025\225\031\216\036" +
    "\206\037\173\041\174\057\170\060\227\061\211\062\175" +
    "\065\203\105\212\107\230\110\214\117\231\122\222\123" +
    "\177\124\165\127\232\130\205\131\233\133\220\134\226" +
    "\147\235\150\224\152\213\157\236\210\217\212\356\217" +
    "\210\220\221\222\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\124\003\201\004\164\005\234\007\171\010\163" +
    "\012\202\014\166\015\223\020\200\023\167\025\225\031" +
    "\216\036\206\037\173\041\174\057\170\060\227\061\211" +
    "\062\175\065\203\105\212\107\230\110\214\117\231\122" +
    "\222\123\177\124\165\127\232\130\205\131\233\133\220" +
    "\134\226\147\235\150\224\152\213\157\236\210\217\212" +
    "\364\217\210\220\221\222\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\124\003\201\004\164" +
    "\005\234\007\171\010\163\012\202\014\166\015\223\020" +
    "\200\023\167\025\225\031\216\036\206\037\173\041\174" +
    "\057\170\060\227\061\211\062\175\065\203\105\212\107" +
    "\230\110\214\117\231\122\222\123\177\124\165\127\232" +
    "\130\205\131\233\133\220\134\226\147\235\150\224\152" +
    "\213\157\236\210\217\212\373\217\210\220\221\222\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\124\003\201" +
    "\004\164\005\234\007\171\010\163\012\202\014\166\015" +
    "\223\020\200\023\167\025\225\031\216\036\206\037\173" +
    "\041\174\057\170\060\227\061\211\062\175\065\203\105" +
    "\212\107\230\110\214\117\231\122\222\123\177\124\165" +
    "\127\232\130\205\131\233\133\220\134\226\147\235\150" +
    "\224\152\213\157\236\210\217\212\u0101\217\210\220\221" +
    "\222\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\124" +
    "\003\201\004\164\005\234\007\171\010\163\012\202\014" +
    "\166\015\223\020\200\023\167\025\225\031\216\036\206" +
    "\037\173\041\174\057\170\060\227\061\211\062\175\065" +
    "\203\105\212\107\230\110\214\117\231\122\222\123\177" +
    "\124\165\127\232\130\205\131\233\133\220\134\226\147" +
    "\235\150\224\152\213\157\236\210\217\212\u0107\217\210" +
    "\220\221\222\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\124\003\201\004\164\005\234\007\171\010\163\012" +
    "\202\014\166\015\223\020\200\023\167\025\225\031\216" +
    "\036\206\037\173\041\174\057\170\060\227\061\211\062" +
    "\175\065\203\105\212\107\230\110\214\117\231\122\222" +
    "\123\177\124\165\127\232\130\205\131\233\133\220\134" +
    "\226\147\235\150\224\152\213\157\236\210\217\212\u010d" +
    "\217\210\220\221\222\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\124\003\201\004\164\005" +
    "\234\007\171\010\163\012\202\014\166\015\223\020\200" +
    "\023\167\025\225\031\216\036\206\037\173\041\174\057" +
    "\170\060\227\061\211\062\175\065\203\105\212\107\230" +
    "\110\214\117\231\122\222\123\177\124\165\127\232\130" +
    "\205\131\233\133\220\134\226\147\235\150\224\152\213" +
    "\157\236\210\217\212\u0114\217\210\220\221\222\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\124\003\201\004" +
    "\164\005\234\007\171\010\163\012\202\014\166\015\223" +
    "\020\200\023\167\025\225\031\216\036\206\037\173\041" +
    "\174\057\170\060\227\061\211\062\175\065\203\105\212" +
    "\107\230\110\214\117\231\122\222\123\177\124\165\127" +
    "\232\130\205\131\233\133\220\134\226\147\235\150\224" +
    "\152\213\157\236\210\217\212\u011a\217\210\220\221\222" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\124\003\201" +
    "\004\164\005\234\007\171\010\163\012\202\014\166\015" +
    "\223\020\200\023\167\025\225\031\216\036\206\037\173" +
    "\041\174\057\170\060\227\061\211\062\175\065\203\105" +
    "\212\107\230\110\214\117\231\122\222\123\177\124\165" +
    "\127\232\130\205\131\233\133\220\134\226\147\235\150" +
    "\224\152\213\157\236\210\217\212\u0123\217\210\220\221" +
    "\222\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\124" +
    "\003\201\004\164\005\234\007\171\010\163\012\202\014" +
    "\166\015\223\020\200\023\167\025\225\031\216\036\206" +
    "\037\173\041\174\057\170\060\227\061\211\062\175\065" +
    "\203\105\212\107\230\110\214\117\231\122\222\123\177" +
    "\124\165\127\232\130\205\131\233\133\220\134\226\147" +
    "\235\150\224\152\213\157\236\210\217\212\u0129\217\210" +
    "\220\221\222\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\124\003\201\004\164\005\234\007\171\010\163\012" +
    "\202\014\166\015\223\020\200\023\167\025\225\031\216" +
    "\036\206\037\173\041\174\057\170\060\227\061\211\062" +
    "\175\065\203\105\212\107\230\110\214\117\231\122\222" +
    "\123\177\124\165\127\232\130\205\131\233\133\220\134" +
    "\226\147\235\150\224\152\213\157\236\210\217\212\u012f" +
    "\217\210\220\221\222\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\115\u0136\204\u0137\001\001\000\002\001" +
    "\001\000\110\006\077\011\057\013\073\016\051\022\063" +
    "\030\100\033\050\034\112\035\111\042\054\046\062\047" +
    "\053\050\110\051\075\052\065\053\113\054\105\055\067" +
    "\064\072\070\102\074\104\076\107\077\071\102\103\103" +
    "\052\111\076\114\056\116\066\135\060\151\101\153\106" +
    "\156\074\173\u013c\176\055\211\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\124\003\201\004\164\005\234\007\171" +
    "\010\163\012\202\014\166\015\223\020\200\023\167\025" +
    "\225\031\216\036\206\037\173\041\174\057\170\060\227" +
    "\061\211\062\175\065\203\105\212\107\230\110\214\117" +
    "\231\122\222\123\177\124\165\127\232\130\205\131\233" +
    "\133\220\134\226\147\235\150\224\152\213\157\236\210" +
    "\217\212\u0140\217\210\220\221\222\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\165\u0148\167\u0146\226\u0147" +
    "\001\001\000\004\223\u0152\001\001\000\002\001\001\000" +
    "\002\001\001\000\144\003\201\004\164\005\234\007\171" +
    "\010\163\012\202\014\166\015\223\020\200\023\167\025" +
    "\225\031\216\036\206\037\173\041\174\046\u014a\047\053" +
    "\050\110\051\075\052\065\053\113\054\105\057\170\060" +
    "\227\061\211\062\175\065\203\105\212\107\230\110\214" +
    "\117\231\122\222\123\177\124\165\127\232\130\205\131" +
    "\233\133\220\134\226\147\235\150\224\152\213\157\236" +
    "\171\u014d\210\217\212\u014c\217\210\220\221\222\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\124" +
    "\003\201\004\164\005\234\007\171\010\163\012\202\014" +
    "\166\015\223\020\200\023\167\025\225\031\216\036\206" +
    "\037\173\041\174\057\170\060\227\061\211\062\175\065" +
    "\203\105\212\107\230\110\214\117\231\122\222\123\177" +
    "\124\165\127\232\130\205\131\233\133\220\134\226\147" +
    "\235\150\224\152\213\157\236\210\217\212\u0154\217\210" +
    "\220\221\222\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\112\006\077\011\057\013\073\016\051\022\063\030" +
    "\100\033\050\034\112\035\111\042\054\046\062\047\053" +
    "\050\110\051\075\052\065\053\113\054\105\055\067\064" +
    "\072\070\102\074\104\076\107\077\071\102\103\103\052" +
    "\111\076\114\056\116\066\135\060\151\101\153\106\156" +
    "\074\173\u015a\175\u015b\176\055\211\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\215\u0161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\124\003\201" +
    "\004\164\005\234\007\171\010\163\012\202\014\166\015" +
    "\223\020\200\023\167\025\225\031\216\036\206\037\173" +
    "\041\174\057\170\060\227\061\211\062\175\065\203\105" +
    "\212\107\230\110\214\117\231\122\222\123\177\124\165" +
    "\127\232\130\205\131\233\133\220\134\226\147\235\150" +
    "\224\152\213\157\236\210\217\212\u0167\217\210\220\221" +
    "\222\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\124" +
    "\003\201\004\164\005\234\007\171\010\163\012\202\014" +
    "\166\015\223\020\200\023\167\025\225\031\216\036\206" +
    "\037\173\041\174\057\170\060\227\061\211\062\175\065" +
    "\203\105\212\107\230\110\214\117\231\122\222\123\177" +
    "\124\165\127\232\130\205\131\233\133\220\134\226\147" +
    "\235\150\224\152\213\157\236\210\217\212\u016d\217\210" +
    "\220\221\222\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\124\003\201\004\164\005\234\007\171\010\163\012" +
    "\202\014\166\015\223\020\200\023\167\025\225\031\216" +
    "\036\206\037\173\041\174\057\170\060\227\061\211\062" +
    "\175\065\203\105\212\107\230\110\214\117\231\122\222" +
    "\123\177\124\165\127\232\130\205\131\233\133\220\134" +
    "\226\147\235\150\224\152\213\157\236\210\217\212\u0173" +
    "\217\210\220\221\222\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\124\003\201\004\164\005\234\007\171\010" +
    "\163\012\202\014\166\015\223\020\200\023\167\025\225" +
    "\031\216\036\206\037\173\041\174\057\170\060\227\061" +
    "\211\062\175\065\203\105\212\107\230\110\214\117\231" +
    "\122\222\123\177\124\165\127\232\130\205\131\233\133" +
    "\220\134\226\147\235\150\224\152\213\157\236\210\217" +
    "\212\u0179\217\210\220\221\222\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\124\003\201\004\164\005\234\007" +
    "\171\010\163\012\202\014\166\015\223\020\200\023\167" +
    "\025\225\031\216\036\206\037\173\041\174\057\170\060" +
    "\227\061\211\062\175\065\203\105\212\107\230\110\214" +
    "\117\231\122\222\123\177\124\165\127\232\130\205\131" +
    "\233\133\220\134\226\147\235\150\224\152\213\157\236" +
    "\210\217\212\u017f\217\210\220\221\222\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\124\003\201\004\164\005" +
    "\234\007\171\010\163\012\202\014\166\015\223\020\200" +
    "\023\167\025\225\031\216\036\206\037\173\041\174\057" +
    "\170\060\227\061\211\062\175\065\203\105\212\107\230" +
    "\110\214\117\231\122\222\123\177\124\165\127\232\130" +
    "\205\131\233\133\220\134\226\147\235\150\224\152\213" +
    "\157\236\210\217\212\u0185\217\210\220\221\222\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\124\003\201\004" +
    "\164\005\234\007\171\010\163\012\202\014\166\015\223" +
    "\020\200\023\167\025\225\031\216\036\206\037\173\041" +
    "\174\057\170\060\227\061\211\062\175\065\203\105\212" +
    "\107\230\110\214\117\231\122\222\123\177\124\165\127" +
    "\232\130\205\131\233\133\220\134\226\147\235\150\224" +
    "\152\213\157\236\210\217\212\u018b\217\210\220\221\222" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\072\u0193\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\200\003\201" +
    "\004\164\005\234\007\171\010\163\011\057\012\202\014" +
    "\166\015\223\016\051\020\200\022\063\023\167\025\225" +
    "\031\216\033\050\034\112\035\111\036\206\037\173\041" +
    "\174\042\054\057\170\060\227\061\211\062\175\065\203" +
    "\074\104\077\071\102\103\103\052\105\212\107\230\110" +
    "\214\111\076\114\056\116\066\117\231\122\222\123\177" +
    "\124\165\127\232\130\205\131\233\133\220\134\226\135" +
    "\060\147\235\150\224\151\101\152\213\153\106\156\074" +
    "\157\236\176\055\200\u019c\210\217\211\u019a\212\u019d\213" +
    "\u019e\217\210\220\221\222\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\u01a5\020\u01a8\055" +
    "\u01a4\205\u01a7\215\u01a9\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\110\006\077\011" +
    "\057\013\073\016\051\022\063\030\100\033\050\034\112" +
    "\035\111\042\054\046\062\047\053\050\110\051\075\052" +
    "\065\053\113\054\105\055\067\064\072\070\102\074\104" +
    "\076\107\077\071\102\103\103\052\111\076\114\056\116" +
    "\066\135\060\151\101\153\106\156\074\173\u01af\176\055" +
    "\211\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\110" +
    "\006\077\011\057\013\073\016\051\022\063\030\100\033" +
    "\050\034\112\035\111\042\054\046\062\047\053\050\110" +
    "\051\075\052\065\053\113\054\105\055\067\064\072\070" +
    "\102\074\104\076\107\077\071\102\103\103\052\111\076" +
    "\114\056\116\066\135\060\151\101\153\106\156\074\173" +
    "\u01b5\176\055\211\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\214\u01bb\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\216\u01c1\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\200\003\201\004\164\005\234\007\171\010\163" +
    "\011\057\012\202\014\166\015\223\016\051\020\200\022" +
    "\063\023\167\025\225\031\216\033\050\034\112\035\111" +
    "\036\206\037\173\041\174\042\054\057\170\060\227\061" +
    "\211\062\175\065\203\074\104\077\071\102\103\103\052" +
    "\105\212\107\230\110\214\111\076\114\056\116\066\117" +
    "\231\122\222\123\177\124\165\127\232\130\205\131\233" +
    "\133\220\134\226\135\060\147\235\150\224\151\101\152" +
    "\213\153\106\156\074\157\236\176\055\200\u019c\210\217" +
    "\211\u019a\212\u019d\213\u01c7\217\210\220\221\222\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\124\003\201\004" +
    "\164\005\234\007\171\010\163\012\202\014\166\015\223" +
    "\020\200\023\167\025\225\031\216\036\206\037\173\041" +
    "\174\057\170\060\227\061\211\062\175\065\203\105\212" +
    "\107\230\110\214\117\231\122\222\123\177\124\165\127" +
    "\232\130\205\131\233\133\220\134\226\147\235\150\224" +
    "\152\213\157\236\210\217\212\u01cd\217\210\220\221\222" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\124\003" +
    "\201\004\164\005\234\007\171\010\163\012\202\014\166" +
    "\015\223\020\200\023\167\025\225\031\216\036\206\037" +
    "\173\041\174\057\170\060\227\061\211\062\175\065\203" +
    "\105\212\107\230\110\214\117\231\122\222\123\177\124" +
    "\165\127\232\130\205\131\233\133\220\134\226\147\235" +
    "\150\224\152\213\157\236\210\217\212\u01d3\217\210\220" +
    "\221\222\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\u01da\001\001\000\002\001\001\000\004\024\u01dc" +
    "\001\001\000\002\001\001\000\014\136\u01df\142\u01e0\144" +
    "\u01dd\146\u01e1\207\u01e2\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\137\u01ed\143\u01ee\221\u01ef\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\110\006\077" +
    "\011\057\013\073\016\051\022\063\030\100\033\050\034" +
    "\112\035\111\042\054\046\062\047\053\050\110\051\075" +
    "\052\065\053\113\054\105\055\067\064\072\070\102\074" +
    "\104\076\107\077\071\102\103\103\052\111\076\114\056" +
    "\116\066\135\060\151\101\153\106\156\074\173\u01f7\176" +
    "\055\211\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\110\006\077\011\057\013\073\016\051\022\063\030\100" +
    "\033\050\034\112\035\111\042\054\046\062\047\053\050" +
    "\110\051\075\052\065\053\113\054\105\055\067\064\072" +
    "\070\102\074\104\076\107\077\071\102\103\103\052\111" +
    "\076\114\056\116\066\135\060\151\101\153\106\156\074" +
    "\173\u01fd\176\055\211\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\177\u0208\001\001\000\004" +
    "\026\u020e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\110\006\077" +
    "\011\057\013\073\016\051\022\063\030\100\033\050\034" +
    "\112\035\111\042\054\046\062\047\053\050\110\051\075" +
    "\052\065\053\113\054\105\055\067\064\072\070\102\074" +
    "\104\076\107\077\071\102\103\103\052\111\076\114\056" +
    "\116\066\135\060\151\101\153\106\156\074\173\u0214\176" +
    "\055\211\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\124\003\201\004\164\005\234\007\171\010\163\012\202" +
    "\014\166\015\223\020\200\023\167\025\225\031\216\036" +
    "\206\037\173\041\174\057\170\060\227\061\211\062\175" +
    "\065\203\105\212\107\230\110\214\117\231\122\222\123" +
    "\177\124\165\127\232\130\205\131\233\133\220\134\226" +
    "\147\235\150\224\152\213\157\236\210\217\212\u021a\217" +
    "\210\220\221\222\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\126\006\077\011\057\013\073\016\051\022\063" +
    "\030\100\033\050\034\112\035\111\040\u0221\042\054\046" +
    "\062\047\053\050\110\051\075\052\065\053\113\054\105" +
    "\055\067\063\u0220\064\072\066\u0228\067\u0223\070\102\074" +
    "\104\076\107\077\071\102\103\103\052\111\076\114\056" +
    "\116\066\121\u0227\135\060\140\u0224\151\101\153\106\156" +
    "\074\173\u0225\176\055\202\u0222\211\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\120\006\077\011\057\013" +
    "\073\016\051\022\063\030\100\033\050\034\112\035\111" +
    "\042\054\046\062\047\053\050\110\051\075\052\065\053" +
    "\113\054\105\055\067\063\u0230\064\072\070\102\074\104" +
    "\076\107\077\071\102\103\103\052\111\076\114\056\116" +
    "\066\121\u0235\135\060\140\u0231\151\101\153\106\156\074" +
    "\173\u0232\176\055\203\u0234\211\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\112\u023c\113\u023f\206\u023e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\217\u0247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\113\u024e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\071\u0255\001\001\000\002\001" +
    "\001\000\126\006\077\011\057\013\073\016\051\022\063" +
    "\030\100\033\050\034\112\035\111\040\u0221\042\054\046" +
    "\062\047\053\050\110\051\075\052\065\053\113\054\105" +
    "\055\067\063\u0220\064\072\066\u0228\067\u0223\070\102\074" +
    "\104\076\107\077\071\102\103\103\052\111\076\114\056" +
    "\116\066\121\u0227\135\060\140\u0224\151\101\153\106\156" +
    "\074\173\u0225\176\055\202\u0256\211\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\124\003\201" +
    "\004\164\005\234\007\171\010\163\012\202\014\166\015" +
    "\223\020\200\023\167\025\225\031\216\036\206\037\173" +
    "\041\174\057\170\060\227\061\211\062\175\065\203\105" +
    "\212\107\230\110\214\117\231\122\222\123\177\124\165" +
    "\127\232\130\205\131\233\133\220\134\226\147\235\150" +
    "\224\152\213\157\236\210\217\212\u025d\217\210\220\221" +
    "\222\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\217\u0264\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\124\003\201\004\164\005\234" +
    "\007\171\010\163\012\202\014\166\015\223\020\200\023" +
    "\167\025\225\031\216\036\206\037\173\041\174\057\170" +
    "\060\227\061\211\062\175\065\203\105\212\107\230\110" +
    "\214\117\231\122\222\123\177\124\165\127\232\130\205" +
    "\131\233\133\220\134\226\147\235\150\224\152\213\157" +
    "\236\210\217\212\u026e\217\210\220\221\222\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\124\003\201\004\164" +
    "\005\234\007\171\010\163\012\202\014\166\015\223\020" +
    "\200\023\167\025\225\031\216\036\206\037\173\041\174" +
    "\057\170\060\227\061\211\062\175\065\203\105\212\107" +
    "\230\110\214\117\231\122\222\123\177\124\165\127\232" +
    "\130\205\131\233\133\220\134\226\147\235\150\224\152" +
    "\213\157\236\210\217\212\u0274\217\210\220\221\222\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\072\u027a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\124\003\201" +
    "\004\164\005\234\007\171\010\163\012\202\014\166\015" +
    "\223\020\200\023\167\025\225\031\216\036\206\037\173" +
    "\041\174\057\170\060\227\061\211\062\175\065\203\105" +
    "\212\107\230\110\214\117\231\122\222\123\177\124\165" +
    "\127\232\130\205\131\233\133\220\134\226\147\235\150" +
    "\224\152\213\157\236\210\217\212\u0280\217\210\220\221" +
    "\222\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\072\u0286\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\110" +
    "\006\077\011\057\013\073\016\051\022\063\030\100\033" +
    "\050\034\112\035\111\042\054\046\062\047\053\050\110" +
    "\051\075\052\065\053\113\054\105\055\067\064\072\070" +
    "\102\074\104\076\107\077\071\102\103\103\052\111\076" +
    "\114\056\116\066\135\060\151\101\153\106\156\074\173" +
    "\u028c\176\055\211\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\124\003\201\004\164\005\234\007\171\010\163" +
    "\012\202\014\166\015\223\020\200\023\167\025\225\031" +
    "\216\036\206\037\173\041\174\057\170\060\227\061\211" +
    "\062\175\065\203\105\212\107\230\110\214\117\231\122" +
    "\222\123\177\124\165\127\232\130\205\131\233\133\220" +
    "\134\226\147\235\150\224\152\213\157\236\210\217\212" +
    "\u0292\217\210\220\221\222\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\072\u0298\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\110\006\077\011\057" +
    "\013\073\016\051\022\063\030\100\033\050\034\112\035" +
    "\111\042\054\046\062\047\053\050\110\051\075\052\065" +
    "\053\113\054\105\055\067\064\072\070\102\074\104\076" +
    "\107\077\071\102\103\103\052\111\076\114\056\116\066" +
    "\135\060\151\101\153\106\156\074\173\u029f\176\055\211" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\110\006\077\011\057\013" +
    "\073\016\051\022\063\030\100\033\050\034\112\035\111" +
    "\042\054\046\062\047\053\050\110\051\075\052\065\053" +
    "\113\054\105\055\067\064\072\070\102\074\104\076\107" +
    "\077\071\102\103\103\052\111\076\114\056\116\066\135" +
    "\060\151\101\153\106\156\074\173\u02a4\176\055\211\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\216\u02aa" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\200\003\201" +
    "\004\164\005\234\007\171\010\163\011\057\012\202\014" +
    "\166\015\223\016\051\020\200\022\063\023\167\025\225" +
    "\031\216\033\050\034\112\035\111\036\206\037\173\041" +
    "\174\042\054\057\170\060\227\061\211\062\175\065\203" +
    "\074\104\077\071\102\103\103\052\105\212\107\230\110" +
    "\214\111\076\114\056\116\066\117\231\122\222\123\177" +
    "\124\165\127\232\130\205\131\233\133\220\134\226\135" +
    "\060\147\235\150\224\151\101\152\213\153\106\156\074" +
    "\157\236\176\055\200\u019c\210\217\211\u019a\212\u019d\213" +
    "\u02b0\217\210\220\221\222\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\124\003\201\004\164\005\234\007\171" +
    "\010\163\012\202\014\166\015\223\020\200\023\167\025" +
    "\225\031\216\036\206\037\173\041\174\057\170\060\227" +
    "\061\211\062\175\065\203\105\212\107\230\110\214\117" +
    "\231\122\222\123\177\124\165\127\232\130\205\131\233" +
    "\133\220\134\226\147\235\150\224\152\213\157\236\210" +
    "\217\212\u02b6\217\210\220\221\222\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\215\u02bc\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\110\006\077\011\057\013\073\016\051\022\063\030\100" +
    "\033\050\034\112\035\111\042\054\046\062\047\053\050" +
    "\110\051\075\052\065\053\113\054\105\055\067\064\072" +
    "\070\102\074\104\076\107\077\071\102\103\103\052\111" +
    "\076\114\056\116\066\135\060\151\101\153\106\156\074" +
    "\173\u02c7\176\055\211\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\224\u02cd\001\001\000\002\001\001\000" +
    "\024\073\u02d1\101\u02d3\104\u02d7\120\u02cf\132\u02d0\145\u02d8" +
    "\155\u02d5\156\u02d4\172\u02d2\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\217\u02e1\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\217\u02e7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\217" +
    "\u02f0\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
 return lexer.next_token(); 
    }

//@@CUPDBG0

  protected Lexer lexer;

  /*declare variabila tip Multipath tree*/
  private MultiTree parseTree = new MultiTree();

  /*acces din exterior la variabila*/
  public MultiTree getParseTree() {
     return parseTree;
  }

  protected MultiTreeNode createTagNode(MultiTreeNode tagName, String value) {throw new UnsupportedOperationException();}
  protected MultiTreeNode createTagNodeWithAttributesAndContent(MultiTreeNode tagAttributes, MultiTreeNode tagContent) {throw new UnsupportedOperationException();}
  protected MultiTreeNode createTagNodeWithAttributesNameAndValue(MultiTreeNode attrName, MultiTreeNode attrValue) {throw new UnsupportedOperationException();}
  protected MultiTreeNode createHeadAndBodyTags(MultiTreeNode htmlTag, MultiTreeNode bodyTag) {throw new UnsupportedOperationException();}
  protected MultiTreeNode createContentNode(MultiTreeNode contentNode) {throw new UnsupportedOperationException();}
  protected MultiTreeNode createAttributeNameNode(MultiTreeNode attributeNameNode) {throw new UnsupportedOperationException();}
  protected MultiTreeNode createTagAndContentNode(MultiTreeNode tagName, MultiTreeNode contentNode) {throw new UnsupportedOperationException();}
  protected MultiTreeNode createTagsAndContentNode(MultiTreeNode tagName, MultiTreeNode tagName2, MultiTreeNode contentNode) {throw new UnsupportedOperationException();}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // doc_start ::= DOCTYPE html_document 
            {
              MultiTreeNode RESULT =null;
		Location html_dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location html_dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode html_d = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG3
RESULT = parseTree.create("DOCTYPE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("doc_start",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= doc_start EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode start_val = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // html_document ::= html_tag 
            {
              MultiTreeNode RESULT =null;
		Location html_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location html_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode html_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG4
RESULT = createTagNode(html_t, "HTML");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("html_document",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // html_tag ::= LT HTML html_tag_attributes GT html_content LT SL HTML GT 
            {
              MultiTreeNode RESULT =null;
		Location html_a_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location html_a_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		MultiTreeNode html_a_list = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location html_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location html_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode html_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG5
RESULT = createTagNodeWithAttributesAndContent(html_a_list, html_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("html_tag",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // html_tag_attributes ::= html_attribute_name html_attribute_value 
            {
              MultiTreeNode RESULT =null;
		Location html_a_kxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location html_a_kxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode html_a_k = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location html_a_vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location html_a_vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode html_a_v = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG6
RESULT = createTagNodeWithAttributesNameAndValue(html_a_k, html_a_v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("html_tag_attributes",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // html_attribute_name ::= version 
            {
              MultiTreeNode RESULT =null;
		//@@CUPDBG7
System.out.println("html attribute name found"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("html_attribute_name",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // html_content ::= head_tag body_tag 
            {
              MultiTreeNode RESULT =null;
		Location head_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location head_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode head_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location body_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location body_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode body_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG8
RESULT = createHeadAndBodyTags(head_t, body_t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("html_content",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // html_content ::= head_tag frameset_tag 
            {
              MultiTreeNode RESULT =null;
		Location head_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location head_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode head_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location frameset_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location frameset_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode frameset_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG9
RESULT = createHeadAndBodyTags(head_t, frameset_t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("html_content",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // head_tag ::= LT HEAD head_tag_attributes GT head_content LT SL HEAD GT 
            {
              MultiTreeNode RESULT =null;
		Location head_a_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location head_a_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		MultiTreeNode head_a_list = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location head_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location head_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode head_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG10
RESULT = createTagNodeWithAttributesAndContent(head_a_list, head_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head_tag",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // head_content ::= base_tag 
            {
              MultiTreeNode RESULT =null;
		Location base_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location base_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode base_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG11
RESULT = createTagNode(base_t, "BASE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head_content",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // head_content ::= isindex_tag 
            {
              MultiTreeNode RESULT =null;
		Location isindex_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location isindex_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode isindex_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG12
RESULT = createTagNode(isindex_t, "ISINDEX");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head_content",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // head_content ::= link_tag 
            {
              MultiTreeNode RESULT =null;
		Location link_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location link_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode link_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG13
RESULT = createTagNode(link_t, "LINK");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head_content",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // head_content ::= meta_tag 
            {
              MultiTreeNode RESULT =null;
		Location meta_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location meta_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode meta_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG14
RESULT = createTagNode(meta_t, "META");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head_content",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // head_content ::= nextid_tag 
            {
              MultiTreeNode RESULT =null;
		Location nextid_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nextid_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode nextid_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG15
RESULT = createTagNode(nextid_t, "NEXTID");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head_content",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // head_content ::= style_tag 
            {
              MultiTreeNode RESULT =null;
		Location style_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location style_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode style_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG16
RESULT = createTagNode(style_t, "STYLE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head_content",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // head_content ::= title_tag 
            {
              MultiTreeNode RESULT =null;
		Location title_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location title_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode title_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG17
RESULT = createTagNode(title_t, "TITLE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head_content",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // head_content ::= script_tag 
            {
              MultiTreeNode RESULT =null;
		Location script_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location script_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode script_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG18
RESULT = createTagNode(script_t, "SCRIPT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("head_content",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // body_tag ::= LT BODY body_tag_attributes GT body_content LT SL BODY GT 
            {
              MultiTreeNode RESULT =null;
		Location body_a_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location body_a_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		MultiTreeNode body_a_list = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location body_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location body_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode body_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG19
RESULT = createTagNodeWithAttributesAndContent(body_a_list, body_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_tag",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // body_content ::= bgsound_tag 
            {
              MultiTreeNode RESULT =null;
		Location bgsound_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bgsound_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode bgsound_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG20
RESULT = createTagNode(bgsound_t, "BGSOUND");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_content",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // body_content ::= hr_tag 
            {
              MultiTreeNode RESULT =null;
		Location hr_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location hr_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode hr_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG21
RESULT = createTagNode(hr_t, "HR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_content",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // body_content ::= address_tag 
            {
              MultiTreeNode RESULT =null;
		Location address_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location address_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode address_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG22
RESULT = createTagNode(address_t, "ADDRESS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_content",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // body_content ::= block 
            {
              MultiTreeNode RESULT =null;
		Location block_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location block_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode block_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG23
RESULT = createTagNode(block_t, "BLOCK");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_content",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // body_content ::= del_tag 
            {
              MultiTreeNode RESULT =null;
		Location del_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location del_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode del_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24
RESULT = createTagNode(del_t, "DEL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_content",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // body_content ::= heading_tag 
            {
              MultiTreeNode RESULT =null;
		Location heading_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location heading_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode heading_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG25
RESULT = createTagNode(heading_t, "HEADING");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_content",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // body_content ::= ins_tag 
            {
              MultiTreeNode RESULT =null;
		Location ins_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ins_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode ins_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG26
RESULT = createTagNode(ins_t, "INS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_content",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // body_content ::= layer_tag 
            {
              MultiTreeNode RESULT =null;
		Location layer_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location layer_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode layer_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG27
RESULT = createTagNode(layer_t, "LAYER");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_content",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // body_content ::= marquee_tag 
            {
              MultiTreeNode RESULT =null;
		Location marquee_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location marquee_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode marquee_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG28
RESULT = createTagNode(marquee_t, "MARQUEE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_content",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // a_tag ::= LT A GT a_tag_attributes GT a_content LT SL A GT 
            {
              MultiTreeNode RESULT =null;
		Location a_a_listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location a_a_listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		MultiTreeNode a_a_list = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location a_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location a_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode a_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG29
RESULT = createTagNodeWithAttributesAndContent(a_a_list, a_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("a_tag",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // a_content ::= heading_tag 
            {
              MultiTreeNode RESULT =null;
		Location heading_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location heading_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode heading_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG30
RESULT = createTagNode(heading_t, "HEADING");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("a_content",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // a_content ::= text 
            {
              MultiTreeNode RESULT =null;
		Location t_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location t_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode t_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG31
RESULT = createContentNode(t_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("a_content",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // text ::= text_content 
            {
              MultiTreeNode RESULT =null;
		Location text_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location text_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode text_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG32
RESULT = createContentNode(text_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // a_tag_attributes ::= a_attribute_name a_attribute_value 
            {
              MultiTreeNode RESULT =null;
		Location a_a_kxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location a_a_kxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode a_a_k = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location a_a_vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location a_a_vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode a_a_v = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG33
RESULT = createTagNodeWithAttributesNameAndValue(a_a_k, a_a_v);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("a_tag_attributes",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // a_attribute_name ::= href_attr 
            {
              MultiTreeNode RESULT =null;
		Location a_attrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location a_attrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode a_attr = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG34
RESULT = createAttributeNameNode(a_attr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("a_attribute_name",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // abbr_tag ::= LT ABBR GT text LT SL ABBR GT 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG35
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("abbr_tag",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // acronym_tag ::= LT ACRONYM GT text LT SL ACRONYM GT 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG36
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("acronym_tag",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // address_tag ::= LT ADDRESS GT address_content LT SL ADDRESS GT 
            {
              MultiTreeNode RESULT =null;
		Location address_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location address_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode address_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG37
RESULT = createContentNode(address_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("address_tag",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // address_content ::= p_tag 
            {
              MultiTreeNode RESULT =null;
		Location p_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location p_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode p_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG38
RESULT = createTagNode(p_t, "P");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("address_content",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // address_content ::= text 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG39
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("address_content",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // applet_tag ::= LT APPLET GT applet_content LT SL APPLET GT 
            {
              MultiTreeNode RESULT =null;
		Location applet_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location applet_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode applet_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG40
RESULT = createContentNode(applet_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("applet_tag",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // applet_content ::= body_content 
            {
              MultiTreeNode RESULT =null;
		Location body_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location body_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode body_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG41
RESULT = createContentNode(body_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("applet_content",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // area_tag ::= LT AREA GT 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("area_tag",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // b_tag ::= LT B GT text LT SL B GT 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG42
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("b_tag",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // base_tag ::= LT BASE GT 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_tag",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // basefont_tag ::= LT BASEFONT GT body_content LT SL BASEFONT GT 
            {
              MultiTreeNode RESULT =null;
		Location body_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location body_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode body_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG43
RESULT = createContentNode(body_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("basefont_tag",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bdo_tag ::= LT BDO GT text LT SL BDO GT 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG44
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bdo_tag",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bgsound_tag ::= LT BGSOUND GT 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bgsound_tag",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // big_tag ::= LT BIG GT text LT SL BIG GT 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG45
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("big_tag",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // blink_tag ::= LT BLINK GT text LT SL BLINK GT 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG46
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blink_tag",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // block ::= block_content 
            {
              MultiTreeNode RESULT =null;
		Location block_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location block_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode block_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG47
RESULT = createContentNode(block_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // block_content ::= isindex_tag 
            {
              MultiTreeNode RESULT =null;
		Location isindex_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location isindex_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode isindex_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG48
RESULT = createTagNode(isindex_t, "ISINDEX");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // block_content ::= basefont_tag 
            {
              MultiTreeNode RESULT =null;
		Location basefont_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location basefont_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode basefont_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG49
RESULT = createTagNode(basefont_t, "BR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // block_content ::= blockquote_tag 
            {
              MultiTreeNode RESULT =null;
		Location blockquote_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blockquote_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode blockquote_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG50
RESULT = createTagNode(blockquote_t, "BLOCKQUOTE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // block_content ::= center_tag 
            {
              MultiTreeNode RESULT =null;
		Location center_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location center_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode center_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG51
RESULT = createTagNode(center_t, "CENTER");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // block_content ::= dir_tag 
            {
              MultiTreeNode RESULT =null;
		Location dir_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dir_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode dir_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG52
RESULT = createTagNode(dir_t, "DIR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // block_content ::= div_tag 
            {
              MultiTreeNode RESULT =null;
		Location div_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location div_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode div_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG53
RESULT = createTagNode(div_t, "DIV");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // block_content ::= dl_tag 
            {
              MultiTreeNode RESULT =null;
		Location dl_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dl_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode dl_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG54
RESULT = createTagNode(dl_t, "DL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // block_content ::= form_tag 
            {
              MultiTreeNode RESULT =null;
		Location form_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location form_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode form_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG55
RESULT = createTagNode(form_t, "FORM");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // block_content ::= listing_tag 
            {
              MultiTreeNode RESULT =null;
		Location listing_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location listing_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode listing_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG56
RESULT = createTagNode(listing_t, "LISTING");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // block_content ::= menu_tag 
            {
              MultiTreeNode RESULT =null;
		Location menu_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location menu_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode menu_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG57
RESULT = createTagNode(menu_t, "MENU");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // block_content ::= multicol_tag 
            {
              MultiTreeNode RESULT =null;
		Location multicol_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location multicol_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode multicol_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG58
RESULT = createTagNode(multicol_t, "MULTICOL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // block_content ::= nobr_tag 
            {
              MultiTreeNode RESULT =null;
		Location nobr_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nobr_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode nobr_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG59
RESULT = createTagNode(nobr_t, "NOBR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // block_content ::= ol_tag 
            {
              MultiTreeNode RESULT =null;
		Location ol_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ol_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode ol_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG60
RESULT = createTagNode(ol_t, "OL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // block_content ::= p_tag 
            {
              MultiTreeNode RESULT =null;
		Location p_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location p_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode p_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG61
RESULT = createTagNode(p_t, "P");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // block_content ::= pre_tag 
            {
              MultiTreeNode RESULT =null;
		Location pre_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pre_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode pre_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG62
RESULT = createTagNode(pre_t, "PRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // block_content ::= table_tag 
            {
              MultiTreeNode RESULT =null;
		Location table_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location table_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode table_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG63
RESULT = createTagNode(table_t, "TABLE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // block_content ::= ul_tag 
            {
              MultiTreeNode RESULT =null;
		Location ul_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ul_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode ul_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG64
RESULT = createTagNode(ul_t, "UL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // block_content ::= xmp_tag 
            {
              MultiTreeNode RESULT =null;
		Location xmp_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location xmp_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode xmp_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG65
RESULT = createTagNode(xmp_t, "XMP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // blockquote_tag ::= LT BLOCKQUOTE GT body_content LT SL BLOCKQUOTE 
            {
              MultiTreeNode RESULT =null;
		Location body_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location body_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		MultiTreeNode body_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG66
RESULT = createContentNode(body_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockquote_tag",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // br_tag ::= LT BR GT 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("br_tag",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // caption_tag ::= LT CAPTION GT body_content LT SL CAPTION GT 
            {
              MultiTreeNode RESULT =null;
		Location body_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location body_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode body_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG67
RESULT = createContentNode(body_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("caption_tag",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // center_tag ::= LT CENTER GT body_content LT SL CENTER GT 
            {
              MultiTreeNode RESULT =null;
		Location body_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location body_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode body_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG68
RESULT = createContentNode(body_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("center_tag",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cite_tag ::= LT CITE GT text LT SL CITE GT 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG69
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cite_tag",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // code_tag ::= LT CODE GT text LT SL CODE GT 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG70
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_tag",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // colgroup_tag ::= LT COLGROUP GT colgroup_content LT SL COLGROUP GT 
            {
              MultiTreeNode RESULT =null;
		Location colgroup_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location colgroup_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode colgroup_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG71
RESULT = createContentNode(colgroup_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colgroup_tag",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // col_tag ::= LT COL GT 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("col_tag",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // colgroup_content ::= LT col_tag GT 
            {
              MultiTreeNode RESULT =null;
		Location col_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location col_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode col_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG72
RESULT = createTagNode(col_t, "COL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colgroup_content",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // content_style ::= abbr_tag 
            {
              MultiTreeNode RESULT =null;
		Location abbr_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location abbr_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode abbr_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG73
RESULT = createTagNode(abbr_t, "ABBR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("content_style",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // content_style ::= acronym_tag 
            {
              MultiTreeNode RESULT =null;
		Location acronym_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location acronym_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode acronym_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG74
RESULT = createTagNode(acronym_t, "ACRONYM");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("content_style",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // content_style ::= cite_tag 
            {
              MultiTreeNode RESULT =null;
		Location cite_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cite_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode cite_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG75
RESULT = createTagNode(cite_t, "CITE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("content_style",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // content_style ::= code_tag 
            {
              MultiTreeNode RESULT =null;
		Location code_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location code_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode code_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG76
RESULT = createTagNode(code_t, "CODE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("content_style",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // content_style ::= dfn_tag 
            {
              MultiTreeNode RESULT =null;
		Location dfn_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dfn_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode dfn_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG77
RESULT = createTagNode(dfn_t, "DFN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("content_style",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // content_style ::= em_tag 
            {
              MultiTreeNode RESULT =null;
		Location em_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location em_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode em_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG78
RESULT = createTagNode(em_t, "EM");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("content_style",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // content_style ::= kbd_tag 
            {
              MultiTreeNode RESULT =null;
		Location kbd_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location kbd_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode kbd_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG79
RESULT = createTagNode(kbd_t, "KBD");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("content_style",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // content_style ::= q_tag 
            {
              MultiTreeNode RESULT =null;
		Location q_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location q_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode q_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG80
RESULT = createTagNode(q_t, "Q");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("content_style",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // content_style ::= strong_tag 
            {
              MultiTreeNode RESULT =null;
		Location strong_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location strong_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode strong_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG81
RESULT = createTagNode(strong_t, "STRONG");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("content_style",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // content_style ::= var_tag 
            {
              MultiTreeNode RESULT =null;
		Location var_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location var_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode var_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG82
RESULT = createTagNode(var_t, "VAR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("content_style",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // dd_tag ::= LT DD GT flow LT SL DD GT 
            {
              MultiTreeNode RESULT =null;
		Location flow_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location flow_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode flow_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG83
RESULT = createContentNode(flow_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dd_tag",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // del_tag ::= LT DEL GT flow LT SL DEL GT 
            {
              MultiTreeNode RESULT =null;
		Location flow_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location flow_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode flow_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG84
RESULT = createContentNode(flow_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("del_tag",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // dfn_tag ::= LT DFN GT text LT SL DFN GT 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG85
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dfn_tag",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // dir_tag ::= LT DIR GT li_tag LT SL DIR GT 
            {
              MultiTreeNode RESULT =null;
		Location li_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location li_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode li_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG86
RESULT = createTagNode(li_t, "LI");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dir_tag",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // div_tag ::= LT DIV GT body_content LT SL DIV GT 
            {
              MultiTreeNode RESULT =null;
		Location body_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location body_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode body_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG87
RESULT = createContentNode(body_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("div_tag",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // dl_tag ::= LT DL GT dl_content LT SL DL GT 
            {
              MultiTreeNode RESULT =null;
		Location dl_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location dl_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode dl_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG88
RESULT = createContentNode(dl_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dl_tag",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // dt_tag ::= LT DT GT text LT SL DT GT 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG89
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dt_tag",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // em_tag ::= LT EM GT text LT SL EM GT 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG90
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("em_tag",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // embed_tag ::= LT EMBED GT 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("embed_tag",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // fieldset_tag ::= LT FIELDSET GT legend_tag form_content LT SL FIELDSET GT 
            {
              MultiTreeNode RESULT =null;
		Location legend_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location legend_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		MultiTreeNode legend_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location form_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location form_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode form_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG91
RESULT = createTagAndContentNode(legend_t, form_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldset_tag",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // flow ::= flow_content 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("flow",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // flow_content ::= block 
            {
              MultiTreeNode RESULT =null;
		Location block_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location block_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode block_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG92
RESULT = createTagNode(block_t, "BLOCK");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("flow_content",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // flow_content ::= text 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG93
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("flow_content",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // frame_tag ::= LT FRAME GT 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("frame_tag",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // font_tag ::= LT FONT GT style_text LT SL FONT GT 
            {
              MultiTreeNode RESULT =null;
		Location s_textxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location s_textxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode s_text = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG94
RESULT = createContentNode(s_text);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("font_tag",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // form_content ::= input_tag 
            {
              MultiTreeNode RESULT =null;
		Location input_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location input_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode input_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG95
RESULT = createTagNode(input_t, "INPUT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("form_content",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // form_content ::= keygen_tag 
            {
              MultiTreeNode RESULT =null;
		Location keygen_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location keygen_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode keygen_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG96
RESULT = createTagNode(keygen_t, "KEYGEN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("form_content",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // form_content ::= body_content 
            {
              MultiTreeNode RESULT =null;
		Location block_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location block_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode block_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG97
RESULT = createContentNode(block_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("form_content",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // form_content ::= fieldset_tag 
            {
              MultiTreeNode RESULT =null;
		Location fieldset_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fieldset_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode fieldset_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG98
RESULT = createTagNode(fieldset_t, "FIELDSET");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("form_content",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // form_content ::= label_tag 
            {
              MultiTreeNode RESULT =null;
		Location label_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location label_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode label_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG99
RESULT = createTagNode(label_t, "LABEL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("form_content",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // form_content ::= select_tag 
            {
              MultiTreeNode RESULT =null;
		Location select_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location select_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode select_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG100
RESULT = createTagNode(select_t, "SELECT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("form_content",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // form_content ::= textarea_tag 
            {
              MultiTreeNode RESULT =null;
		Location textarea_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location textarea_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode textarea_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG101
RESULT = createTagNode(textarea_t, "TEXTAREA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("form_content",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // form_tag ::= LT FORM GT form_content LT SL FORM GT 
            {
              MultiTreeNode RESULT =null;
		Location form_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location form_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode form_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG102
RESULT = createContentNode(form_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("form_tag",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // frameset_content ::= frame_tag 
            {
              MultiTreeNode RESULT =null;
		Location frame_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location frame_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode frame_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG103
RESULT = createTagNode(frame_t, "FRAME");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("frameset_content",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // frameset_content ::= noframes_tag 
            {
              MultiTreeNode RESULT =null;
		Location noframes_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location noframes_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode noframes_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG104
RESULT = createTagNode(noframes_t, "NOFRAMES");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("frameset_content",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // frameset_tag ::= LT FRAMESET GT frameset_content LT SL FRAMESET GT 
            {
              MultiTreeNode RESULT =null;
		Location frameset_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location frameset_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode frameset_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG105
RESULT = createContentNode(frameset_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("frameset_tag",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // heading_tag ::= h1_tag 
            {
              MultiTreeNode RESULT =null;
		Location h1_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location h1_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode h1_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG106
RESULT = createTagNode(h1_t, "H1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("heading_tag",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // heading_tag ::= h2_tag 
            {
              MultiTreeNode RESULT =null;
		Location h2_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location h2_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode h2_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG107
RESULT = createTagNode(h2_t, "H2");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("heading_tag",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // heading_tag ::= h3_tag 
            {
              MultiTreeNode RESULT =null;
		Location h3_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location h3_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode h3_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG108
RESULT = createTagNode(h3_t, "H3");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("heading_tag",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // heading_tag ::= h4_tag 
            {
              MultiTreeNode RESULT =null;
		Location h4_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location h4_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode h4_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG109
RESULT = createTagNode(h4_t, "H4");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("heading_tag",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // heading_tag ::= h5_tag 
            {
              MultiTreeNode RESULT =null;
		Location h5_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location h5_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode h5_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG110
RESULT = createTagNode(h5_t, "H5");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("heading_tag",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // heading_tag ::= h6_tag 
            {
              MultiTreeNode RESULT =null;
		Location h6_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location h6_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode h6_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG111
RESULT = createTagNode(h6_t, "H6");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("heading_tag",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // h1_tag ::= LT H1 GT text LT SL H1 GT 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG112
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h1_tag",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // h2_tag ::= LT H2 GT text LT SL H2 GT 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG113
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h2_tag",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // h3_tag ::= LT H3 GT text LT SL H3 GT 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG114
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h3_tag",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // h4_tag ::= LT H4 GT text LT SL H4 GT 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG115
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h4_tag",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // h5_tag ::= LT H5 GT text LT SL H5 GT 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG116
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h5_tag",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // h6_tag ::= LT H6 GT text LT SL H6 GT 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG117
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h6_tag",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // hr_tag ::= LT HR GT 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hr_tag",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // i_tag ::= LT I GT text LT SL I GT 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG118
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("i_tag",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // img_tag ::= LT IMG GT 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("img_tag",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // iframe_tag ::= LT IFRAME GT 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iframe_tag",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // isindex_tag ::= LT ISINDEX GT 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("isindex_tag",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ilayer_tag ::= LT ILAYER GT body_content LT SL ILAYER GT 
            {
              MultiTreeNode RESULT =null;
		Location b_contentxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location b_contentxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode b_content = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG119
RESULT = createContentNode(b_content);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ilayer_tag",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // input_tag ::= LT INPUT GT 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input_tag",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ins_tag ::= LT INS GT flow LT SL INS GT 
            {
              MultiTreeNode RESULT =null;
		Location flow_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location flow_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode flow_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG120
RESULT = createContentNode(flow_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ins_tag",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // kbd_tag ::= LT KBD GT text LT SL KBD GT 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG121
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("kbd_tag",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // keygen_tag ::= LT KEYGEN GT 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keygen_tag",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // label_content ::= input_tag 
            {
              MultiTreeNode RESULT =null;
		Location input_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location input_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode input_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG122
RESULT = createTagNode(input_t, "INPUT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_content",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // label_content ::= body_content 
            {
              MultiTreeNode RESULT =null;
		Location body_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location body_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode body_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG123
RESULT = createContentNode(body_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_content",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // label_content ::= select_tag 
            {
              MultiTreeNode RESULT =null;
		Location select_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location select_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode select_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG124
RESULT = createTagNode(select_t, "SELECT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_content",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // label_content ::= textarea_tag 
            {
              MultiTreeNode RESULT =null;
		Location textarea_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location textarea_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode textarea_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG125
RESULT = createTagNode(textarea_t, "TEXTAREA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_content",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // label_tag ::= LT LABEL GT label_content LT SL LABEL GT 
            {
              MultiTreeNode RESULT =null;
		Location label_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location label_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode label_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG126
RESULT = createContentNode(label_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_tag",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // layer_tag ::= LT LAYER GT body_content LT SL LAYER GT 
            {
              MultiTreeNode RESULT =null;
		Location body_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location body_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode body_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG127
RESULT = createContentNode(body_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("layer_tag",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // legend_tag ::= LT LEGEND GT text LT SL LEGEND GT 
            {
              MultiTreeNode RESULT =null;
		Location text_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG128
RESULT = createContentNode(text_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("legend_tag",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // li_tag ::= LT LI GT flow LT SL LI GT 
            {
              MultiTreeNode RESULT =null;
		Location flow_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location flow_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode flow_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG129
RESULT = createContentNode(flow_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("li_tag",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // link_tag ::= LT LINK GT 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("link_tag",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // listing_tag ::= LT LISTING GT literal_text LT SL LISTING GT 
            {
              MultiTreeNode RESULT =null;
		Location literal_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location literal_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode literal_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG130
RESULT = createContentNode(literal_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listing_tag",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // map_content ::= area_tag 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("map_content",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // map_tag ::= LT MAP GT map_content LT SL MAP GT 
            {
              MultiTreeNode RESULT =null;
		Location map_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location map_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode map_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG131
RESULT = createContentNode(map_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("map_tag",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // marquee_tag ::= LT MARQUEE GT style_text LT SL MARQUEE GT 
            {
              MultiTreeNode RESULT =null;
		Location s_textxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location s_textxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode s_text = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG132
RESULT = createContentNode(s_text);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("marquee_tag",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // meta_tag ::= LT META GT 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("meta_tag",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // menu_tag ::= LT MENU GT li_tag LT SL MENU GT 
            {
              MultiTreeNode RESULT =null;
		Location li_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location li_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode li_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG133
RESULT = createTagNode(li_t, "LI");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("menu_tag",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // multicol_tag ::= LT MULTICOL GT body_content LT SL MULTICOL GT 
            {
              MultiTreeNode RESULT =null;
		Location body_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location body_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode body_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG134
RESULT = createContentNode(body_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multicol_tag",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // nextid_tag ::= LT NEXTID GT 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nextid_tag",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // nobr_tag ::= LT NOBR GT text LT SL NOBR GT 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG135
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nobr_tag",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // noembed_tag ::= LT NOEMBED GT text LT SL NOEMBED GT 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG136
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("noembed_tag",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // noframes_tag ::= LT NOFRAMES GT body_content LT SL NOFRAMES GT 
            {
              MultiTreeNode RESULT =null;
		Location body_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location body_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode body_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG137
RESULT = createContentNode(body_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("noframes_tag",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // noscript_tag ::= LT NOSCRIPT GT text LT SL NOSCRIPT GT 
            {
              MultiTreeNode RESULT =null;
		Location text_c_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location text_c_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode text_c_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG138
RESULT = createContentNode(text_c_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("noscript_tag",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // object_content ::= param_tag body_content 
            {
              MultiTreeNode RESULT =null;
		Location param_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location param_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		MultiTreeNode param_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location body_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location body_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode body_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG139
RESULT = createTagAndContentNode(param_t, body_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_content",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // object_tag ::= LT OBJECT GT object_content LT SL OBJECT GT 
            {
              MultiTreeNode RESULT =null;
		Location object_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location object_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode object_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG140
RESULT = createContentNode(object_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("object_tag",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ol_tag ::= LT OL GT li_tag LT SL OL GT 
            {
              MultiTreeNode RESULT =null;
		Location li_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location li_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode li_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG141
RESULT = createTagNode(li_t, "LI");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ol_tag",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // optgroup_tag ::= LT OPTGROUP GT option_tag LT SL OPTGROUP GT 
            {
              MultiTreeNode RESULT =null;
		Location option_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location option_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode option_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG142
RESULT = createTagNode(option_t, "OPTION");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optgroup_tag",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // option_tag ::= LT OPTION GT plain_text LT SL OPTION GT 
            {
              MultiTreeNode RESULT =null;
		Location plain_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location plain_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode plain_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG143
RESULT = createContentNode(plain_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("option_tag",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // p_tag ::= LT P GT text LT SL P GT 
            {
              MultiTreeNode RESULT =null;
		Location t_content_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location t_content_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode t_content_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG144
RESULT = createContentNode(t_content_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("p_tag",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // param_tag ::= LT PARAM GT 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_tag",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // physical_style ::= b_tag 
            {
              MultiTreeNode RESULT =null;
		Location b_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location b_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode b_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG145
RESULT = createTagNode(b_t, "B");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("physical_style",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // physical_style ::= bdo_tag 
            {
              MultiTreeNode RESULT =null;
		Location bdo_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bdo_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode bdo_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG146
RESULT = createTagNode(bdo_t, "BDO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("physical_style",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // physical_style ::= big_tag 
            {
              MultiTreeNode RESULT =null;
		Location big_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location big_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode big_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG147
RESULT = createTagNode(big_t, "BIG");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("physical_style",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // physical_style ::= blink_tag 
            {
              MultiTreeNode RESULT =null;
		Location blink_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blink_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode blink_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG148
RESULT = createTagNode(blink_t, "BLINK");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("physical_style",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // physical_style ::= font_tag 
            {
              MultiTreeNode RESULT =null;
		Location font_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location font_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode font_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG149
RESULT = createTagNode(font_t, "FONT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("physical_style",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // physical_style ::= i_tag 
            {
              MultiTreeNode RESULT =null;
		Location i_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location i_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode i_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG150
RESULT = createTagNode(i_t, "I");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("physical_style",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // physical_style ::= s_tag 
            {
              MultiTreeNode RESULT =null;
		Location s_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location s_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode s_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG151
RESULT = createTagNode(s_t, "S");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("physical_style",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // physical_style ::= small_tag 
            {
              MultiTreeNode RESULT =null;
		Location small_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location small_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode small_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG152
RESULT = createTagNode(small_t, "SMALL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("physical_style",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // physical_style ::= span_tag 
            {
              MultiTreeNode RESULT =null;
		Location span_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location span_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode span_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG153
RESULT = createTagNode(span_t, "SPAN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("physical_style",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // physical_style ::= strike_tag 
            {
              MultiTreeNode RESULT =null;
		Location strike_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location strike_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode strike_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG154
RESULT = createTagNode(strike_t, "STRIKE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("physical_style",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // physical_style ::= sub_tag 
            {
              MultiTreeNode RESULT =null;
		Location sub_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sub_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode sub_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG155
RESULT = createTagNode(sub_t, "SUB");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("physical_style",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // physical_style ::= sup_tag 
            {
              MultiTreeNode RESULT =null;
		Location sup_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sup_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode sup_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG156
RESULT = createTagNode(sup_t, "SUP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("physical_style",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // physical_style ::= tt_tag 
            {
              MultiTreeNode RESULT =null;
		Location tt_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tt_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode tt_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG157
RESULT = createTagNode(tt_t, "TT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("physical_style",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // physical_style ::= u_tag 
            {
              MultiTreeNode RESULT =null;
		Location u_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location u_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode u_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG158
RESULT = createTagNode(u_t, "U");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("physical_style",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // pre_content ::= br_tag 
            {
              MultiTreeNode RESULT =null;
		Location br_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location br_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode br_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG159
RESULT = createTagNode(br_t, "BR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pre_content",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // pre_content ::= hr_tag 
            {
              MultiTreeNode RESULT =null;
		Location hr_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location hr_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode hr_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG160
RESULT = createTagNode(hr_t, "HR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pre_content",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // pre_content ::= a_tag 
            {
              MultiTreeNode RESULT =null;
		Location a_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location a_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode a_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG161
RESULT = createTagNode(a_t, "A");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pre_content",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // pre_content ::= style_text 
            {
              MultiTreeNode RESULT =null;
		Location s_textxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location s_textxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode s_text = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG162
RESULT = createContentNode(s_text);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pre_content",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // pre_tag ::= LT PRE GT pre_content LT SL PRE GT 
            {
              MultiTreeNode RESULT =null;
		Location pre_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location pre_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode pre_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG163
RESULT = createContentNode(pre_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pre_tag",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // q_tag ::= LT Q GT text LT SL Q GT 
            {
              MultiTreeNode RESULT =null;
		Location t_content_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location t_content_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode t_content_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG164
RESULT = createContentNode(t_content_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("q_tag",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // s_tag ::= LT S GT text LT SL S GT 
            {
              MultiTreeNode RESULT =null;
		Location t_content_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location t_content_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode t_content_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG165
RESULT = createContentNode(t_content_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s_tag",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // samp_tag ::= LT SAMP GT text LT SL SAMP GT 
            {
              MultiTreeNode RESULT =null;
		Location t_content_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location t_content_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode t_content_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG166
RESULT = createContentNode(t_content_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("samp_tag",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // script_tag ::= LT SCRIPT GT plain_text LT SL SCRIPT GT 
            {
              MultiTreeNode RESULT =null;
		Location plain_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location plain_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode plain_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG167
RESULT = createContentNode(plain_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("script_tag",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // select_content ::= optgroup_tag 
            {
              MultiTreeNode RESULT =null;
		Location optgroup_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location optgroup_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode optgroup_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG168
RESULT = createTagNode(optgroup_t, "OPTGROUP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select_content",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // select_content ::= option_tag 
            {
              MultiTreeNode RESULT =null;
		Location option_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location option_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode option_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG169
RESULT = createTagNode(option_t, "OPTION");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select_content",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // select_tag ::= LT SELECT GT select_content LT SL SELECT GT 
            {
              MultiTreeNode RESULT =null;
		Location select_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location select_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode select_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG170
RESULT = createContentNode(select_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select_tag",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // server_tag ::= LT SERVER GT plain_text LT SL SERVER GT 
            {
              MultiTreeNode RESULT =null;
		Location plain_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location plain_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode plain_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG171
RESULT = createContentNode(plain_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("server_tag",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // small_tag ::= LT SMALL GT text LT SL SMALL GT 
            {
              MultiTreeNode RESULT =null;
		Location t_content_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location t_content_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode t_content_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG172
RESULT = createContentNode(t_content_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("small_tag",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // spacer_tag ::= LT SPACER GT 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("spacer_tag",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // span_tag ::= LT SPAN GT text LT SL SPAN GT 
            {
              MultiTreeNode RESULT =null;
		Location t_content_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location t_content_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode t_content_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG173
RESULT = createContentNode(t_content_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("span_tag",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // strike_tag ::= LT STRIKE GT text LT SL STRIKE GT 
            {
              MultiTreeNode RESULT =null;
		Location t_content_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location t_content_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode t_content_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG174
RESULT = createContentNode(t_content_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strike_tag",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // strong_tag ::= LT STRONG GT text LT SL STRONG GT 
            {
              MultiTreeNode RESULT =null;
		Location t_content_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location t_content_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode t_content_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG175
RESULT = createContentNode(t_content_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("strong_tag",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // style_tag ::= LT STYLE GT plain_text LT SL STYLE GT 
            {
              MultiTreeNode RESULT =null;
		Location plain_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location plain_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode plain_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG176
RESULT = createContentNode(plain_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("style_tag",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // sub_tag ::= LT SUB GT text LT SL SUB GT 
            {
              MultiTreeNode RESULT =null;
		Location t_content_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location t_content_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode t_content_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG177
RESULT = createContentNode(t_content_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_tag",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // sup_tag ::= LT SUP GT text LT SL SUP GT 
            {
              MultiTreeNode RESULT =null;
		Location t_content_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location t_content_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode t_content_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG178
RESULT = createContentNode(t_content_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sup_tag",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // table_cell ::= td_tag 
            {
              MultiTreeNode RESULT =null;
		Location td_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location td_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode td_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG179
RESULT = createTagNode(td_t, "TD");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("table_cell",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // table_cell ::= th_tag 
            {
              MultiTreeNode RESULT =null;
		Location th_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location th_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode th_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG180
RESULT = createTagNode(th_t, "TH");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("table_cell",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // table_content ::= tbody_tag 
            {
              MultiTreeNode RESULT =null;
		Location tbody_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tbody_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode tbody_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG181
RESULT = createTagNode(tbody_t, "TBODY");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("table_content",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // table_content ::= tfoot_tag 
            {
              MultiTreeNode RESULT =null;
		Location tfoot_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tfoot_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode tfoot_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG182
RESULT = createTagNode(tfoot_t, "TFOOT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("table_content",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // table_content ::= thead_tag 
            {
              MultiTreeNode RESULT =null;
		Location thead_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location thead_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode thead_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG183
RESULT = createTagNode(thead_t, "THEAD");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("table_content",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // table_content ::= tr_tag 
            {
              MultiTreeNode RESULT =null;
		Location tr_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tr_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode tr_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG184
RESULT = createTagNode(tr_t, "TR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("table_content",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // tbody_tag ::= LT TBODY GT 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tbody_tag",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // tfoot_tag ::= LT TFOOT GT 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tfoot_tag",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // thead_tag ::= LT THEAD GT 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("thead_tag",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // table_tag ::= LT TABLE GT caption_tag colgroup_tag table_content LT SL TABLE GT 
            {
              MultiTreeNode RESULT =null;
		Location caption_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location caption_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		MultiTreeNode caption_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location colgroup_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location colgroup_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		MultiTreeNode colgroup_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location table_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location table_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode table_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG185
RESULT = createTagsAndContentNode(caption_t, colgroup_t, table_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("table_tag",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // td_tag ::= LT TD GT body_content LT SL TD GT 
            {
              MultiTreeNode RESULT =null;
		Location body_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location body_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode body_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG186
RESULT = createContentNode(body_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("td_tag",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // text_content ::= br_tag 
            {
              MultiTreeNode RESULT =null;
		Location br_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location br_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode br_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG187
RESULT = createTagNode(br_t, "BR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_content",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // text_content ::= embed_tag 
            {
              MultiTreeNode RESULT =null;
		Location embed_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location embed_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode embed_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG188
RESULT = createTagNode(embed_t, "EMBED");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_content",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // text_content ::= iframe_tag 
            {
              MultiTreeNode RESULT =null;
		Location iframe_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location iframe_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode iframe_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG189
RESULT = createTagNode(iframe_t, "IFRAME");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_content",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // text_content ::= img_tag 
            {
              MultiTreeNode RESULT =null;
		Location img_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location img_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode img_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG190
RESULT = createTagNode(img_t, "IMG");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_content",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // text_content ::= spacer_tag 
            {
              MultiTreeNode RESULT =null;
		Location spacer_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location spacer_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode spacer_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG191
RESULT = createTagNode(spacer_t, "SPACER");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_content",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // text_content ::= wbr_tag 
            {
              MultiTreeNode RESULT =null;
		Location wbr_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location wbr_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode wbr_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG192
RESULT = createTagNode(wbr_t, "WBR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_content",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // text_content ::= a_tag 
            {
              MultiTreeNode RESULT =null;
		Location a_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location a_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode a_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG193
RESULT = createTagNode(a_t, "A");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_content",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // text_content ::= applet_tag 
            {
              MultiTreeNode RESULT =null;
		Location applet_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location applet_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode applet_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG194
RESULT = createTagNode(applet_t, "APPLET");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_content",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // text_content ::= content_style 
            {
              MultiTreeNode RESULT =null;
		Location content_sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location content_sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode content_s = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG195
RESULT = createContentNode(content_s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_content",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // text_content ::= ilayer_tag 
            {
              MultiTreeNode RESULT =null;
		Location ilayer_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ilayer_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode ilayer_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG196
RESULT = createTagNode(ilayer_t, "ILAYER");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_content",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // text_content ::= noembed_tag 
            {
              MultiTreeNode RESULT =null;
		Location noembed_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location noembed_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode noembed_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG197
RESULT = createTagNode(noembed_t, "NOEMBED");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_content",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // text_content ::= noscript_tag 
            {
              MultiTreeNode RESULT =null;
		Location noscript_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location noscript_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode noscript_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG198
RESULT = createTagNode(noscript_t, "NOSCRIPT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_content",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // text_content ::= object_tag 
            {
              MultiTreeNode RESULT =null;
		Location object_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location object_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode object_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG199
RESULT = createTagNode(object_t, "OBJECT");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_content",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // text_content ::= plain_text 
            {
              MultiTreeNode RESULT =null;
		Location plain_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location plain_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode plain_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG200
RESULT = createContentNode(plain_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_content",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // text_content ::= physical_style 
            {
              MultiTreeNode RESULT =null;
		Location physical_sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location physical_sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		MultiTreeNode physical_s = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG201
RESULT = createContentNode(physical_s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("text_content",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // textarea_tag ::= LT TEXTAREA GT plain_text LT SL TEXTAREA GT 
            {
              MultiTreeNode RESULT =null;
		Location plain_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location plain_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode plain_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG202
RESULT = createContentNode(plain_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("textarea_tag",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // th_tag ::= LT TH GT body_content LT SL TH GT 
            {
              MultiTreeNode RESULT =null;
		Location body_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location body_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode body_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG203
RESULT = createContentNode(body_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("th_tag",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // title_tag ::= LT TITLE GT plain_text LT SL TITLE GT 
            {
              MultiTreeNode RESULT =null;
		Location plain_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location plain_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode plain_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG204
RESULT = createContentNode(plain_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("title_tag",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // tr_tag ::= LT TR GT table_cell LT SL TR GT 
            {
              MultiTreeNode RESULT =null;
		Location t_cellxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location t_cellxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode t_cell = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG205
RESULT = createTagNode(t_cell, "TABLE CELL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tr_tag",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // tt_tag ::= LT TT GT text LT SL TT GT 
            {
              MultiTreeNode RESULT =null;
		Location t_content_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location t_content_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode t_content_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG206
RESULT = createContentNode(t_content_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tt_tag",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // u_tag ::= LT U GT text LT SL U GT 
            {
              MultiTreeNode RESULT =null;
		Location t_content_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location t_content_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode t_content_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG207
RESULT = createContentNode(t_content_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("u_tag",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // ul_tag ::= LT UL GT li_tag LT SL UL GT 
            {
              MultiTreeNode RESULT =null;
		Location li_txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location li_txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode li_t = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG208
RESULT = createTagNode(li_t, "LI");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ul_tag",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // wbr_tag ::= LT WBR GT 
            {
              MultiTreeNode RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("wbr_tag",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // var_tag ::= LT VAR GT text LT SL VAR GT 
            {
              MultiTreeNode RESULT =null;
		Location t_content_wrapperxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location t_content_wrapperxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode t_content_wrapper = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG209
RESULT = createContentNode(t_content_wrapper);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_tag",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // xmp_tag ::= LT XMP GT literal_text LT SL XMP GT 
            {
              MultiTreeNode RESULT =null;
		Location literal_cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location literal_cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		MultiTreeNode literal_c = (MultiTreeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		//@@CUPDBG210
RESULT = createContentNode(literal_c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("xmp_tag",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
